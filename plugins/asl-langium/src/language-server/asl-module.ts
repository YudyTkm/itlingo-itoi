import ElkConstructor from 'elkjs/lib/elk.bundled';
import {
    createDefaultModule, createDefaultSharedModule, DefaultSharedModuleContext, inject, Module, PartialLangiumServices
} from 'langium';
import { DefaultElementFilter, ElkFactory, ElkLayoutEngine, IElementFilter, ILayoutConfigurator } from 'sprotty-elk/lib/elk-layout';
import { AslDiagramGenerator } from './diagram-generator';
import { AslGeneratedModule, AslGeneratedSharedModule } from './generated/module';
import { AslLayoutConfigurator } from './layout-config';
import { AslValidator } from './asl-validator';
import { SprottySharedModule, SprottyDiagramServices, LangiumSprottySharedServices, LangiumSprottyServices} from 'langium-sprotty';

/**
 * Declaration of custom services - add your own service classes here.
 */
export type AslAddedServices = {
     validation: {
         AslValidator: AslValidator
    }
    layout: {
        ElkFactory: ElkFactory,
        ElementFilter: IElementFilter,
        LayoutConfigurator: ILayoutConfigurator
    }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type AslServices = LangiumSprottyServices & AslAddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const AslModule: Module<AslServices, PartialLangiumServices  & SprottyDiagramServices & AslAddedServices> = {
    diagram: {
        DiagramGenerator: services => new AslDiagramGenerator(services),
        ModelLayoutEngine: services => new ElkLayoutEngine(services.layout.ElkFactory, services.layout.ElementFilter, services.layout.LayoutConfigurator) as any
    },
    validation: {
        AslValidator: () => new AslValidator()
    },
    layout: {
        ElkFactory: () => () => new ElkConstructor({ algorithms: ['layered'] }),
        ElementFilter: () => new DefaultElementFilter,
        LayoutConfigurator: () => new AslLayoutConfigurator
    }
};

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createAslServices(context: DefaultSharedModuleContext): {
    shared: LangiumSprottySharedServices,
    Asl: AslServices
} {
    const shared = inject(
        createDefaultSharedModule(context),
        AslGeneratedSharedModule,
        SprottySharedModule
    );
    const Asl = inject(
        createDefaultModule({ shared }),
        AslGeneratedModule,
        AslModule
    );
    shared.ServiceRegistry.register(Asl);
    // registerValidationChecks(Asl);
    return { shared, Asl };
}
