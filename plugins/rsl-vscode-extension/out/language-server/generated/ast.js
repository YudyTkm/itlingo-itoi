"use strict";
/******************************************************************************
 * This file was generated by langium-cli 1.2.1.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
exports.isLinguisticLanguageType_pt = exports.isLinguisticLanguageType_it = exports.isLinguisticLanguageType_fr = exports.isLinguisticLanguageType_es = exports.isLinguisticLanguageType_en = exports.isLinguisticLanguageType_de = exports.isLinguisticFragmentPart = exports.LinguisticFragmentPart = exports.isLinguisticElement = exports.LinguisticElement = exports.isIncludeElementGeneric = exports.IncludeElementGeneric = exports.isGoalType = exports.GoalType = exports.isGoalSubType = exports.GoalSubType = exports.isGlossaryTermType = exports.GlossaryTermType = exports.isFRType = exports.FRType = exports.isForeignKeyOnDeleteType = exports.ForeignKeyOnDeleteType = exports.isDataEntityType = exports.DataEntityType = exports.isDataEntitySubType = exports.DataEntitySubType = exports.isDataEntityGeneric = exports.DataEntityGeneric = exports.isDataEntityClusterType = exports.DataEntityClusterType = exports.isConstraintType = exports.ConstraintType = exports.isConstraintSubType = exports.ConstraintSubType = exports.isBehaviorElement = exports.BehaviorElement = exports.isActorType = exports.ActorType = exports.isActiveTaskType = exports.ActiveTaskType = exports.isActiveStructureElement = exports.ActiveStructureElement = exports.isActiveFlowType = exports.ActiveFlowType = exports.isActiveEventType = exports.ActiveEventType = exports.isActiveElement = exports.ActiveElement = exports.isActionType = exports.ActionType = void 0;
exports.RiskTreatmentType = exports.isRiskSubType = exports.RiskSubType = exports.isRiskGeneric = exports.RiskGeneric = exports.isRequirementsRelationType = exports.RequirementsRelationType = exports.isRequirement = exports.Requirement = exports.isRelationType = exports.RelationType = exports.isQualifiedNameWithWildcard = exports.isQualifiedName = exports.isQRType = exports.QRType = exports.isQRSubType = exports.QRSubType = exports.isPriorityType = exports.PriorityType = exports.isPercentage = exports.isPassiveStructureElement = exports.PassiveStructureElement = exports.isPartOfSpeechEnum_X = exports.isPartOfSpeechEnum_VERB = exports.isPartOfSpeechEnum_SYM = exports.isPartOfSpeechEnum_SCONJ = exports.isPartOfSpeechEnum_PUNCT = exports.isPartOfSpeechEnum_PROPN = exports.isPartOfSpeechEnum_PRON = exports.isPartOfSpeechEnum_PART = exports.isPartOfSpeechEnum_NUM = exports.isPartOfSpeechEnum_NOUN = exports.isPartOfSpeechEnum_INTJ = exports.isPartOfSpeechEnum_DET = exports.isPartOfSpeechEnum_CCONJ = exports.isPartOfSpeechEnum_AUX = exports.isPartOfSpeechEnum_ADV = exports.isPartOfSpeechEnum_ADP = exports.isPartOfSpeechEnum_ADJ = exports.isPackageAbstract = exports.PackageAbstract = exports.isOtherElement = exports.OtherElement = exports.isMetricType = exports.MetricType = exports.isLinguisticRuleSeverityLevel_warning = exports.isLinguisticRuleSeverityLevel_error = exports.isLinguisticRuleElementProperty_name = exports.isLinguisticRuleElementProperty_id = exports.isLinguisticRuleElementProperty_description = void 0;
exports.TestType = exports.isTestSuiteSetupTeardown = exports.TestSuiteSetupTeardown = exports.isTestsRelationType = exports.TestsRelationType = exports.isTestScenarioType = exports.TestScenarioType = exports.isTestElement = exports.TestElement = exports.isTestData = exports.TestData = exports.isTest = exports.Test = exports.isSystemType = exports.SystemType = exports.isSystemSubType = exports.SystemSubType = exports.isSystemsRelationType = exports.SystemsRelationType = exports.isSystemsRelationCategory = exports.SystemsRelationCategory = exports.isSystemSet = exports.SystemSet = exports.isSystemRelation = exports.SystemRelation = exports.isSystemElement = exports.SystemElement = exports.isSystemConcept = exports.SystemConcept = exports.isStructureElement = exports.StructureElement = exports.isStereotypeType = exports.StereotypeType = exports.isStepType = exports.StepType = exports.isStepSubType = exports.StepSubType = exports.isStates = exports.States = exports.isStateMachineType = exports.StateMachineType = exports.isStakeholderType = exports.StakeholderType = exports.isStakeholderSubType = exports.StakeholderSubType = exports.isScenarioType = exports.ScenarioType = exports.isRiskType = exports.RiskType = exports.isRiskTreatmentType = void 0;
exports.ActiveTaskTypeOriginal = exports.isActiveTaskTypeExtendedRef = exports.ActiveTaskTypeExtendedRef = exports.isActiveTaskTypeExtended = exports.ActiveTaskTypeExtended = exports.isActiveTask = exports.ActiveTask = exports.isActiveFlowTypeOriginal = exports.ActiveFlowTypeOriginal = exports.isActiveFlowTypeExtendedRef = exports.ActiveFlowTypeExtendedRef = exports.isActiveFlowTypeExtended = exports.ActiveFlowTypeExtended = exports.isActiveFlow = exports.ActiveFlow = exports.isActiveEventTypeOriginal = exports.ActiveEventTypeOriginal = exports.isActiveEventTypeExtendedRef = exports.ActiveEventTypeExtendedRef = exports.isActiveEventTypeExtended = exports.ActiveEventTypeExtended = exports.isActiveEvent = exports.ActiveEvent = exports.isActionTypeOriginal = exports.ActionTypeOriginal = exports.isActionTypeExtendedRef = exports.ActionTypeExtendedRef = exports.isActionTypeExtended = exports.ActionTypeExtended = exports.isAcceptanceCriteriaTest = exports.AcceptanceCriteriaTest = exports.isAcceptanceCriteriaScenario = exports.AcceptanceCriteriaScenario = exports.isAcceptanceCriteriaRule = exports.AcceptanceCriteriaRule = exports.isAcceptanceCriteria = exports.AcceptanceCriteria = exports.isVulnerabilityType = exports.VulnerabilityType = exports.isVulnerabilitySubType = exports.VulnerabilitySubType = exports.isVulnerabilityAttackVector = exports.VulnerabilityAttackVector = exports.isUserStoryType = exports.UserStoryType = exports.isUseCaseType = exports.UseCaseType = exports.isTypeExtended = exports.TypeExtended = exports.isTestType = void 0;
exports.DataEntityClusterTypeExtendedRef = exports.isDataEntityClusterTypeExtended = exports.DataEntityClusterTypeExtended = exports.isDataEntityCluster = exports.DataEntityCluster = exports.isDataEntity = exports.DataEntity = exports.isDataAttributeTypeExtended = exports.DataAttributeTypeExtended = exports.isDataAttributeType = exports.DataAttributeType = exports.isDataAttributeRefsList = exports.DataAttributeRefsList = exports.isDataAttributeConstraint = exports.DataAttributeConstraint = exports.isDataAttribute = exports.DataAttribute = exports.isData = exports.Data = exports.isConstraintTypeOriginal = exports.ConstraintTypeOriginal = exports.isConstraintTypeExtendedRef = exports.ConstraintTypeExtendedRef = exports.isConstraintTypeExtended = exports.ConstraintTypeExtended = exports.isConstraintSubTypeOriginal = exports.ConstraintSubTypeOriginal = exports.isConstraintSubTypeExtendedRef = exports.ConstraintSubTypeExtendedRef = exports.isConstraintSubTypeExtended = exports.ConstraintSubTypeExtended = exports.isConstraint = exports.Constraint = exports.isChildDataEntity = exports.ChildDataEntity = exports.isCheck = exports.Check = exports.isBoolean = exports.Boolean = exports.isAttributeValue = exports.AttributeValue = exports.isActorTypeOriginal = exports.ActorTypeOriginal = exports.isActorTypeExtendedRef = exports.ActorTypeExtendedRef = exports.isActorTypeExtended = exports.ActorTypeExtended = exports.isActor = exports.Actor = exports.isActiveTaskTypeOriginal = void 0;
exports.FR = exports.isForeignKeyOnDeleteTypeOriginal = exports.ForeignKeyOnDeleteTypeOriginal = exports.isForeignKeyOnDeleteTypeExtendedRef = exports.ForeignKeyOnDeleteTypeExtendedRef = exports.isForeignKeyOnDeleteTypeExtended = exports.ForeignKeyOnDeleteTypeExtended = exports.isForeignKey = exports.ForeignKey = exports.isExpressionOperator = exports.ExpressionOperator = exports.isExpression = exports.Expression = exports.isElementsRelationType = exports.ElementsRelationType = exports.isElementsRelation = exports.ElementsRelation = exports.isDateTime = exports.DateTime = exports.isDateRule = exports.DateRule = exports.isDataTableRow = exports.DataTableRow = exports.isDataTableHeader = exports.DataTableHeader = exports.isDataTable = exports.DataTable = exports.isDataEnumerationElement = exports.DataEnumerationElement = exports.isDataEnumeration = exports.DataEnumeration = exports.isDataEntityTypeOriginal = exports.DataEntityTypeOriginal = exports.isDataEntityTypeExtendedRef = exports.DataEntityTypeExtendedRef = exports.isDataEntityTypeExtended = exports.DataEntityTypeExtended = exports.isDataEntityTest = exports.DataEntityTest = exports.isDataEntitySubTypeOriginal = exports.DataEntitySubTypeOriginal = exports.isDataEntitySubTypeExtendedRef = exports.DataEntitySubTypeExtendedRef = exports.isDataEntitySubTypeExtended = exports.DataEntitySubTypeExtended = exports.isDataEntityConstraint = exports.DataEntityConstraint = exports.isDataEntityClusterTypeOriginal = exports.DataEntityClusterTypeOriginal = exports.isDataEntityClusterTypeExtendedRef = void 0;
exports.LinguisticRuleElement = exports.isLinguisticRule = exports.LinguisticRule = exports.isLinguisticPattern = exports.LinguisticPattern = exports.isLinguisticLanguage = exports.LinguisticLanguage = exports.isLinguisticFragmentRef = exports.LinguisticFragmentRef = exports.isLinguisticFragment = exports.LinguisticFragment = exports.isIncludeSystemElementType = exports.IncludeSystemElementType = exports.isIncludeElement = exports.IncludeElement = exports.isIncludeAll = exports.IncludeAll = exports.isImport = exports.Import = exports.isImpactLevel = exports.ImpactLevel = exports.isGoalTypeOriginal = exports.GoalTypeOriginal = exports.isGoalTypeExtendedRef = exports.GoalTypeExtendedRef = exports.isGoalTypeExtended = exports.GoalTypeExtended = exports.isGoalSubTypeOriginal = exports.GoalSubTypeOriginal = exports.isGoalSubTypeExtendedRef = exports.GoalSubTypeExtendedRef = exports.isGoalSubTypeExtended = exports.GoalSubTypeExtended = exports.isGoal = exports.Goal = exports.isGlossaryTermTypeOriginal = exports.GlossaryTermTypeOriginal = exports.isGlossaryTermTypeExtendedRef = exports.GlossaryTermTypeExtendedRef = exports.isGlossaryTermTypeExtended = exports.GlossaryTermTypeExtended = exports.isGlossaryTerm = exports.GlossaryTerm = exports.isFRTypeOriginal = exports.FRTypeOriginal = exports.isFRTypeExtendedRef = exports.FRTypeExtendedRef = exports.isFRTypeExtended = exports.FRTypeExtended = exports.isFR = void 0;
exports.RefDataEntity = exports.isRefActor = exports.RefActor = exports.isRefActiveElement = exports.RefActiveElement = exports.isQRTypeOriginal = exports.QRTypeOriginal = exports.isQRTypeExtendedRef = exports.QRTypeExtendedRef = exports.isQRTypeExtended = exports.QRTypeExtended = exports.isQRSubTypeOriginal = exports.QRSubTypeOriginal = exports.isQRSubTypeExtendedRef = exports.QRSubTypeExtendedRef = exports.isQRSubTypeExtended = exports.QRSubTypeExtended = exports.isQR = exports.QR = exports.isPriorityTypeOriginal = exports.PriorityTypeOriginal = exports.isPriorityTypeExtendedRef = exports.PriorityTypeExtendedRef = exports.isPriorityTypeExtended = exports.PriorityTypeExtended = exports.isPartOfSpeech = exports.PartOfSpeech = exports.isPackageSystem = exports.PackageSystem = exports.isMultiplicity = exports.Multiplicity = exports.isMonth = exports.Month = exports.isModel = exports.Model = exports.isMetricTypeOriginal = exports.MetricTypeOriginal = exports.isMetricTypeExtendedRef = exports.MetricTypeExtendedRef = exports.isMetricTypeExtended = exports.MetricTypeExtended = exports.isManyToMany = exports.ManyToMany = exports.isMainScenario = exports.MainScenario = exports.isLinguisticRuleType = exports.LinguisticRuleType = exports.isLinguisticRuleElementAndProperty = exports.LinguisticRuleElementAndProperty = exports.isLinguisticRuleElement = void 0;
exports.RiskTypeOriginal = exports.isRiskTypeExtendedRef = exports.RiskTypeExtendedRef = exports.isRiskTypeExtended = exports.RiskTypeExtended = exports.isRiskTreatmentTypeOriginal = exports.RiskTreatmentTypeOriginal = exports.isRiskTreatmentTypeExtendedRef = exports.RiskTreatmentTypeExtendedRef = exports.isRiskTreatmentTypeExtended = exports.RiskTreatmentTypeExtended = exports.isRiskTreatment = exports.RiskTreatment = exports.isRiskSubTypeOriginal = exports.RiskSubTypeOriginal = exports.isRiskSubTypeExtendedRef = exports.RiskSubTypeExtendedRef = exports.isRiskSubTypeExtended = exports.RiskSubTypeExtended = exports.isRiskStatus = exports.RiskStatus = exports.isRiskAssessment = exports.RiskAssessment = exports.isRisk = exports.Risk = exports.isRequirementsRelationTypeOriginal = exports.RequirementsRelationTypeOriginal = exports.isRequirementsRelationTypeExtendedRef = exports.RequirementsRelationTypeExtendedRef = exports.isRequirementsRelationTypeExtended = exports.RequirementsRelationTypeExtended = exports.isRequirementsRelation = exports.RequirementsRelation = exports.isRelationTypeOriginal = exports.RelationTypeOriginal = exports.isRelationTypeExtendedRef = exports.RelationTypeExtendedRef = exports.isRelationTypeExtended = exports.RelationTypeExtended = exports.isRefUCAction = exports.RefUCAction = exports.isRefUC = exports.RefUC = exports.isRefTermApplicableTo = exports.RefTermApplicableTo = exports.isRefRequirements = exports.RefRequirements = exports.isReferenceElements = exports.ReferenceElements = exports.isRefDataEntity = void 0;
exports.StepTypeExtendedRef = exports.isStepTypeExtended = exports.StepTypeExtended = exports.isStepSubTypeOriginal = exports.StepSubTypeOriginal = exports.isStepSubTypeExtendedRef = exports.StepSubTypeExtendedRef = exports.isStepSubTypeExtended = exports.StepSubTypeExtended = exports.isStepOperationUCType = exports.StepOperationUCType = exports.isStep = exports.Step = exports.isStateSequence = exports.StateSequence = exports.isStateMachineTypeOriginal = exports.StateMachineTypeOriginal = exports.isStateMachineTypeExtendedRef = exports.StateMachineTypeExtendedRef = exports.isStateMachineTypeExtended = exports.StateMachineTypeExtended = exports.isStateMachineTest = exports.StateMachineTest = exports.isStateMachine = exports.StateMachine = exports.isState = exports.State = exports.isStakeholderTypeOriginal = exports.StakeholderTypeOriginal = exports.isStakeholderTypeExtendedRef = exports.StakeholderTypeExtendedRef = exports.isStakeholderTypeExtended = exports.StakeholderTypeExtended = exports.isStakeholderSubTypeOriginal = exports.StakeholderSubTypeOriginal = exports.isStakeholderSubTypeExtendedRef = exports.StakeholderSubTypeExtendedRef = exports.isStakeholderSubTypeExtended = exports.StakeholderSubTypeExtended = exports.isStakeholder = exports.Stakeholder = exports.isScenarioTypeOriginal = exports.ScenarioTypeOriginal = exports.isScenarioTypeExtendedRef = exports.ScenarioTypeExtendedRef = exports.isScenarioTypeExtended = exports.ScenarioTypeExtended = exports.isScenario = exports.Scenario = exports.isRiskTypeOriginal = void 0;
exports.TestScenarioTypeExtended = exports.isTestParameter = exports.TestParameter = exports.isTestDataAttribute = exports.TestDataAttribute = exports.isTestCase = exports.TestCase = exports.isTermApplicableTo = exports.TermApplicableTo = exports.isTag = exports.Tag = exports.isSystemTypeOriginal = exports.SystemTypeOriginal = exports.isSystemTypeExtendedRef = exports.SystemTypeExtendedRef = exports.isSystemTypeExtended = exports.SystemTypeExtended = exports.isSystemSubTypeOriginal = exports.SystemSubTypeOriginal = exports.isSystemSubTypeExtendedRef = exports.SystemSubTypeExtendedRef = exports.isSystemSubTypeExtended = exports.SystemSubTypeExtended = exports.isSystemsRelationTypeOriginal = exports.SystemsRelationTypeOriginal = exports.isSystemsRelationTypeExtendedRef = exports.SystemsRelationTypeExtendedRef = exports.isSystemsRelationTypeExtended = exports.SystemsRelationTypeExtended = exports.isSystemsRelationCategoryOriginal = exports.SystemsRelationCategoryOriginal = exports.isSystemsRelationCategoryExtendedRef = exports.SystemsRelationCategoryExtendedRef = exports.isSystemsRelationCategoryExtended = exports.SystemsRelationCategoryExtended = exports.isSystemsRelation = exports.SystemsRelation = exports.isSystem = exports.System = exports.isStereotypeTypeOriginal = exports.StereotypeTypeOriginal = exports.isStereotypeTypeExtendedRef = exports.StereotypeTypeExtendedRef = exports.isStereotypeTypeExtended = exports.StereotypeTypeExtended = exports.isStereotype = exports.Stereotype = exports.isStepTypeOriginal = exports.StepTypeOriginal = exports.isStepTypeExtendedRef = void 0;
exports.UpdateFields = exports.isUpdateField = exports.UpdateField = exports.isUCIncludes = exports.UCIncludes = exports.isUCExtensionPoints = exports.UCExtensionPoints = exports.isUCExtensionPoint = exports.UCExtensionPoint = exports.isUCExtends = exports.UCExtends = exports.isUCActions = exports.UCActions = exports.isTransition = exports.Transition = exports.isTime = exports.Time = exports.isThreat = exports.Threat = exports.isThemeType = exports.ThemeType = exports.isTheme = exports.Theme = exports.isTestTypeOriginal = exports.TestTypeOriginal = exports.isTestTypeExtendedRef = exports.TestTypeExtendedRef = exports.isTestTypeExtended = exports.TestTypeExtended = exports.isTestSuiteTeardown = exports.TestSuiteTeardown = exports.isTestSuiteSetup = exports.TestSuiteSetup = exports.isTestSuite = exports.TestSuite = exports.isTestStep = exports.TestStep = exports.isTestsRelationTypeOriginal = exports.TestsRelationTypeOriginal = exports.isTestsRelationTypeExtendedRef = exports.TestsRelationTypeExtendedRef = exports.isTestsRelationTypeExtended = exports.TestsRelationTypeExtended = exports.isTestsRelation = exports.TestsRelation = exports.isTestScenarioTypeOriginal = exports.TestScenarioTypeOriginal = exports.isTestScenarioTypeExtendedRef = exports.TestScenarioTypeExtendedRef = exports.isTestScenarioTypeExtended = void 0;
exports.DataAttributeTypeExtendedRef = exports.isWord = exports.Word = exports.isVulnerabilityTypeOriginal = exports.VulnerabilityTypeOriginal = exports.isVulnerabilityTypeExtendedRef = exports.VulnerabilityTypeExtendedRef = exports.isVulnerabilityTypeExtended = exports.VulnerabilityTypeExtended = exports.isVulnerabilitySubTypeOriginal = exports.VulnerabilitySubTypeOriginal = exports.isVulnerabilitySubTypeExtendedRef = exports.VulnerabilitySubTypeExtendedRef = exports.isVulnerabilitySubTypeExtended = exports.VulnerabilitySubTypeExtended = exports.isVulnerabilityAttackVectorOriginal = exports.VulnerabilityAttackVectorOriginal = exports.isVulnerabilityAttackVectorExtendedRef = exports.VulnerabilityAttackVectorExtendedRef = exports.isVulnerabilityAttackVectorExtended = exports.VulnerabilityAttackVectorExtended = exports.isVulnerability = exports.Vulnerability = exports.isViewType = exports.ViewType = exports.isView = exports.View = exports.isVariableTypeExtended = exports.VariableTypeExtended = exports.isVariableType = exports.VariableType = exports.isUserStoryTypeOriginal = exports.UserStoryTypeOriginal = exports.isUserStoryTypeExtendedRef = exports.UserStoryTypeExtendedRef = exports.isUserStoryTypeExtended = exports.UserStoryTypeExtended = exports.isUserStory = exports.UserStory = exports.isUseCaseTypeOriginal = exports.UseCaseTypeOriginal = exports.isUseCaseTypeExtendedRef = exports.UseCaseTypeExtendedRef = exports.isUseCaseTypeExtended = exports.UseCaseTypeExtended = exports.isUseCaseTest = exports.UseCaseTest = exports.isUseCase = exports.UseCase = exports.isUpdateFields = void 0;
exports.reflection = exports.RslAstReflection = exports.isVariableTypeOriginal = exports.VariableTypeOriginal = exports.isVariableTypeExtendedRef = exports.VariableTypeExtendedRef = exports.isDataEnumerationRef = exports.DataEnumerationRef = exports.isDataAttributeTypeOriginal = exports.DataAttributeTypeOriginal = exports.isDataAttributeTypeExtendedRef = void 0;
const langium_1 = require("langium");
exports.ActionType = 'ActionType';
function isActionType(item) {
    return exports.reflection.isInstance(item, exports.ActionType);
}
exports.isActionType = isActionType;
exports.ActiveElement = 'ActiveElement';
function isActiveElement(item) {
    return exports.reflection.isInstance(item, exports.ActiveElement);
}
exports.isActiveElement = isActiveElement;
exports.ActiveEventType = 'ActiveEventType';
function isActiveEventType(item) {
    return exports.reflection.isInstance(item, exports.ActiveEventType);
}
exports.isActiveEventType = isActiveEventType;
exports.ActiveFlowType = 'ActiveFlowType';
function isActiveFlowType(item) {
    return exports.reflection.isInstance(item, exports.ActiveFlowType);
}
exports.isActiveFlowType = isActiveFlowType;
exports.ActiveStructureElement = 'ActiveStructureElement';
function isActiveStructureElement(item) {
    return exports.reflection.isInstance(item, exports.ActiveStructureElement);
}
exports.isActiveStructureElement = isActiveStructureElement;
exports.ActiveTaskType = 'ActiveTaskType';
function isActiveTaskType(item) {
    return exports.reflection.isInstance(item, exports.ActiveTaskType);
}
exports.isActiveTaskType = isActiveTaskType;
exports.ActorType = 'ActorType';
function isActorType(item) {
    return exports.reflection.isInstance(item, exports.ActorType);
}
exports.isActorType = isActorType;
exports.BehaviorElement = 'BehaviorElement';
function isBehaviorElement(item) {
    return exports.reflection.isInstance(item, exports.BehaviorElement);
}
exports.isBehaviorElement = isBehaviorElement;
exports.ConstraintSubType = 'ConstraintSubType';
function isConstraintSubType(item) {
    return exports.reflection.isInstance(item, exports.ConstraintSubType);
}
exports.isConstraintSubType = isConstraintSubType;
exports.ConstraintType = 'ConstraintType';
function isConstraintType(item) {
    return exports.reflection.isInstance(item, exports.ConstraintType);
}
exports.isConstraintType = isConstraintType;
exports.DataEntityClusterType = 'DataEntityClusterType';
function isDataEntityClusterType(item) {
    return exports.reflection.isInstance(item, exports.DataEntityClusterType);
}
exports.isDataEntityClusterType = isDataEntityClusterType;
exports.DataEntityGeneric = 'DataEntityGeneric';
function isDataEntityGeneric(item) {
    return exports.reflection.isInstance(item, exports.DataEntityGeneric);
}
exports.isDataEntityGeneric = isDataEntityGeneric;
exports.DataEntitySubType = 'DataEntitySubType';
function isDataEntitySubType(item) {
    return exports.reflection.isInstance(item, exports.DataEntitySubType);
}
exports.isDataEntitySubType = isDataEntitySubType;
exports.DataEntityType = 'DataEntityType';
function isDataEntityType(item) {
    return exports.reflection.isInstance(item, exports.DataEntityType);
}
exports.isDataEntityType = isDataEntityType;
exports.ForeignKeyOnDeleteType = 'ForeignKeyOnDeleteType';
function isForeignKeyOnDeleteType(item) {
    return exports.reflection.isInstance(item, exports.ForeignKeyOnDeleteType);
}
exports.isForeignKeyOnDeleteType = isForeignKeyOnDeleteType;
exports.FRType = 'FRType';
function isFRType(item) {
    return exports.reflection.isInstance(item, exports.FRType);
}
exports.isFRType = isFRType;
exports.GlossaryTermType = 'GlossaryTermType';
function isGlossaryTermType(item) {
    return exports.reflection.isInstance(item, exports.GlossaryTermType);
}
exports.isGlossaryTermType = isGlossaryTermType;
exports.GoalSubType = 'GoalSubType';
function isGoalSubType(item) {
    return exports.reflection.isInstance(item, exports.GoalSubType);
}
exports.isGoalSubType = isGoalSubType;
exports.GoalType = 'GoalType';
function isGoalType(item) {
    return exports.reflection.isInstance(item, exports.GoalType);
}
exports.isGoalType = isGoalType;
exports.IncludeElementGeneric = 'IncludeElementGeneric';
function isIncludeElementGeneric(item) {
    return exports.reflection.isInstance(item, exports.IncludeElementGeneric);
}
exports.isIncludeElementGeneric = isIncludeElementGeneric;
exports.LinguisticElement = 'LinguisticElement';
function isLinguisticElement(item) {
    return exports.reflection.isInstance(item, exports.LinguisticElement);
}
exports.isLinguisticElement = isLinguisticElement;
exports.LinguisticFragmentPart = 'LinguisticFragmentPart';
function isLinguisticFragmentPart(item) {
    return exports.reflection.isInstance(item, exports.LinguisticFragmentPart);
}
exports.isLinguisticFragmentPart = isLinguisticFragmentPart;
function isLinguisticLanguageType_de(item) {
    return item === 'German';
}
exports.isLinguisticLanguageType_de = isLinguisticLanguageType_de;
function isLinguisticLanguageType_en(item) {
    return item === 'English';
}
exports.isLinguisticLanguageType_en = isLinguisticLanguageType_en;
function isLinguisticLanguageType_es(item) {
    return item === 'Spanish';
}
exports.isLinguisticLanguageType_es = isLinguisticLanguageType_es;
function isLinguisticLanguageType_fr(item) {
    return item === 'French';
}
exports.isLinguisticLanguageType_fr = isLinguisticLanguageType_fr;
function isLinguisticLanguageType_it(item) {
    return item === 'Italian';
}
exports.isLinguisticLanguageType_it = isLinguisticLanguageType_it;
function isLinguisticLanguageType_pt(item) {
    return item === 'Portuguese';
}
exports.isLinguisticLanguageType_pt = isLinguisticLanguageType_pt;
function isLinguisticRuleElementProperty_description(item) {
    return item === 'description';
}
exports.isLinguisticRuleElementProperty_description = isLinguisticRuleElementProperty_description;
function isLinguisticRuleElementProperty_id(item) {
    return item === 'id';
}
exports.isLinguisticRuleElementProperty_id = isLinguisticRuleElementProperty_id;
function isLinguisticRuleElementProperty_name(item) {
    return item === 'name';
}
exports.isLinguisticRuleElementProperty_name = isLinguisticRuleElementProperty_name;
function isLinguisticRuleSeverityLevel_error(item) {
    return item === 'Error';
}
exports.isLinguisticRuleSeverityLevel_error = isLinguisticRuleSeverityLevel_error;
function isLinguisticRuleSeverityLevel_warning(item) {
    return item === 'Warning';
}
exports.isLinguisticRuleSeverityLevel_warning = isLinguisticRuleSeverityLevel_warning;
exports.MetricType = 'MetricType';
function isMetricType(item) {
    return exports.reflection.isInstance(item, exports.MetricType);
}
exports.isMetricType = isMetricType;
exports.OtherElement = 'OtherElement';
function isOtherElement(item) {
    return exports.reflection.isInstance(item, exports.OtherElement);
}
exports.isOtherElement = isOtherElement;
exports.PackageAbstract = 'PackageAbstract';
function isPackageAbstract(item) {
    return exports.reflection.isInstance(item, exports.PackageAbstract);
}
exports.isPackageAbstract = isPackageAbstract;
function isPartOfSpeechEnum_ADJ(item) {
    return item === 'Adjective';
}
exports.isPartOfSpeechEnum_ADJ = isPartOfSpeechEnum_ADJ;
function isPartOfSpeechEnum_ADP(item) {
    return item === 'Adposition';
}
exports.isPartOfSpeechEnum_ADP = isPartOfSpeechEnum_ADP;
function isPartOfSpeechEnum_ADV(item) {
    return item === 'Adverb';
}
exports.isPartOfSpeechEnum_ADV = isPartOfSpeechEnum_ADV;
function isPartOfSpeechEnum_AUX(item) {
    return item === 'Auxiliary';
}
exports.isPartOfSpeechEnum_AUX = isPartOfSpeechEnum_AUX;
function isPartOfSpeechEnum_CCONJ(item) {
    return item === 'CoordinatingConjunction';
}
exports.isPartOfSpeechEnum_CCONJ = isPartOfSpeechEnum_CCONJ;
function isPartOfSpeechEnum_DET(item) {
    return item === 'Determiner';
}
exports.isPartOfSpeechEnum_DET = isPartOfSpeechEnum_DET;
function isPartOfSpeechEnum_INTJ(item) {
    return item === 'Interjection';
}
exports.isPartOfSpeechEnum_INTJ = isPartOfSpeechEnum_INTJ;
function isPartOfSpeechEnum_NOUN(item) {
    return item === 'Noun';
}
exports.isPartOfSpeechEnum_NOUN = isPartOfSpeechEnum_NOUN;
function isPartOfSpeechEnum_NUM(item) {
    return item === 'Numeral';
}
exports.isPartOfSpeechEnum_NUM = isPartOfSpeechEnum_NUM;
function isPartOfSpeechEnum_PART(item) {
    return item === 'Particle';
}
exports.isPartOfSpeechEnum_PART = isPartOfSpeechEnum_PART;
function isPartOfSpeechEnum_PRON(item) {
    return item === 'Pronoun';
}
exports.isPartOfSpeechEnum_PRON = isPartOfSpeechEnum_PRON;
function isPartOfSpeechEnum_PROPN(item) {
    return item === 'ProperNoun';
}
exports.isPartOfSpeechEnum_PROPN = isPartOfSpeechEnum_PROPN;
function isPartOfSpeechEnum_PUNCT(item) {
    return item === 'Punctuation';
}
exports.isPartOfSpeechEnum_PUNCT = isPartOfSpeechEnum_PUNCT;
function isPartOfSpeechEnum_SCONJ(item) {
    return item === 'SubordinatingConjunction';
}
exports.isPartOfSpeechEnum_SCONJ = isPartOfSpeechEnum_SCONJ;
function isPartOfSpeechEnum_SYM(item) {
    return item === 'Symbol';
}
exports.isPartOfSpeechEnum_SYM = isPartOfSpeechEnum_SYM;
function isPartOfSpeechEnum_VERB(item) {
    return item === 'Verb';
}
exports.isPartOfSpeechEnum_VERB = isPartOfSpeechEnum_VERB;
function isPartOfSpeechEnum_X(item) {
    return item === 'Other';
}
exports.isPartOfSpeechEnum_X = isPartOfSpeechEnum_X;
exports.PassiveStructureElement = 'PassiveStructureElement';
function isPassiveStructureElement(item) {
    return exports.reflection.isInstance(item, exports.PassiveStructureElement);
}
exports.isPassiveStructureElement = isPassiveStructureElement;
function isPercentage(item) {
    return typeof item === 'string';
}
exports.isPercentage = isPercentage;
exports.PriorityType = 'PriorityType';
function isPriorityType(item) {
    return exports.reflection.isInstance(item, exports.PriorityType);
}
exports.isPriorityType = isPriorityType;
exports.QRSubType = 'QRSubType';
function isQRSubType(item) {
    return exports.reflection.isInstance(item, exports.QRSubType);
}
exports.isQRSubType = isQRSubType;
exports.QRType = 'QRType';
function isQRType(item) {
    return exports.reflection.isInstance(item, exports.QRType);
}
exports.isQRType = isQRType;
function isQualifiedName(item) {
    return typeof item === 'string';
}
exports.isQualifiedName = isQualifiedName;
function isQualifiedNameWithWildcard(item) {
    return typeof item === 'string';
}
exports.isQualifiedNameWithWildcard = isQualifiedNameWithWildcard;
exports.RelationType = 'RelationType';
function isRelationType(item) {
    return exports.reflection.isInstance(item, exports.RelationType);
}
exports.isRelationType = isRelationType;
exports.Requirement = 'Requirement';
function isRequirement(item) {
    return exports.reflection.isInstance(item, exports.Requirement);
}
exports.isRequirement = isRequirement;
exports.RequirementsRelationType = 'RequirementsRelationType';
function isRequirementsRelationType(item) {
    return exports.reflection.isInstance(item, exports.RequirementsRelationType);
}
exports.isRequirementsRelationType = isRequirementsRelationType;
exports.RiskGeneric = 'RiskGeneric';
function isRiskGeneric(item) {
    return exports.reflection.isInstance(item, exports.RiskGeneric);
}
exports.isRiskGeneric = isRiskGeneric;
exports.RiskSubType = 'RiskSubType';
function isRiskSubType(item) {
    return exports.reflection.isInstance(item, exports.RiskSubType);
}
exports.isRiskSubType = isRiskSubType;
exports.RiskTreatmentType = 'RiskTreatmentType';
function isRiskTreatmentType(item) {
    return exports.reflection.isInstance(item, exports.RiskTreatmentType);
}
exports.isRiskTreatmentType = isRiskTreatmentType;
exports.RiskType = 'RiskType';
function isRiskType(item) {
    return exports.reflection.isInstance(item, exports.RiskType);
}
exports.isRiskType = isRiskType;
exports.ScenarioType = 'ScenarioType';
function isScenarioType(item) {
    return exports.reflection.isInstance(item, exports.ScenarioType);
}
exports.isScenarioType = isScenarioType;
exports.StakeholderSubType = 'StakeholderSubType';
function isStakeholderSubType(item) {
    return exports.reflection.isInstance(item, exports.StakeholderSubType);
}
exports.isStakeholderSubType = isStakeholderSubType;
exports.StakeholderType = 'StakeholderType';
function isStakeholderType(item) {
    return exports.reflection.isInstance(item, exports.StakeholderType);
}
exports.isStakeholderType = isStakeholderType;
exports.StateMachineType = 'StateMachineType';
function isStateMachineType(item) {
    return exports.reflection.isInstance(item, exports.StateMachineType);
}
exports.isStateMachineType = isStateMachineType;
exports.States = 'States';
function isStates(item) {
    return exports.reflection.isInstance(item, exports.States);
}
exports.isStates = isStates;
exports.StepSubType = 'StepSubType';
function isStepSubType(item) {
    return exports.reflection.isInstance(item, exports.StepSubType);
}
exports.isStepSubType = isStepSubType;
exports.StepType = 'StepType';
function isStepType(item) {
    return exports.reflection.isInstance(item, exports.StepType);
}
exports.isStepType = isStepType;
exports.StereotypeType = 'StereotypeType';
function isStereotypeType(item) {
    return exports.reflection.isInstance(item, exports.StereotypeType);
}
exports.isStereotypeType = isStereotypeType;
exports.StructureElement = 'StructureElement';
function isStructureElement(item) {
    return exports.reflection.isInstance(item, exports.StructureElement);
}
exports.isStructureElement = isStructureElement;
exports.SystemConcept = 'SystemConcept';
function isSystemConcept(item) {
    return exports.reflection.isInstance(item, exports.SystemConcept);
}
exports.isSystemConcept = isSystemConcept;
exports.SystemElement = 'SystemElement';
function isSystemElement(item) {
    return exports.reflection.isInstance(item, exports.SystemElement);
}
exports.isSystemElement = isSystemElement;
exports.SystemRelation = 'SystemRelation';
function isSystemRelation(item) {
    return exports.reflection.isInstance(item, exports.SystemRelation);
}
exports.isSystemRelation = isSystemRelation;
exports.SystemSet = 'SystemSet';
function isSystemSet(item) {
    return exports.reflection.isInstance(item, exports.SystemSet);
}
exports.isSystemSet = isSystemSet;
exports.SystemsRelationCategory = 'SystemsRelationCategory';
function isSystemsRelationCategory(item) {
    return exports.reflection.isInstance(item, exports.SystemsRelationCategory);
}
exports.isSystemsRelationCategory = isSystemsRelationCategory;
exports.SystemsRelationType = 'SystemsRelationType';
function isSystemsRelationType(item) {
    return exports.reflection.isInstance(item, exports.SystemsRelationType);
}
exports.isSystemsRelationType = isSystemsRelationType;
exports.SystemSubType = 'SystemSubType';
function isSystemSubType(item) {
    return exports.reflection.isInstance(item, exports.SystemSubType);
}
exports.isSystemSubType = isSystemSubType;
exports.SystemType = 'SystemType';
function isSystemType(item) {
    return exports.reflection.isInstance(item, exports.SystemType);
}
exports.isSystemType = isSystemType;
exports.Test = 'Test';
function isTest(item) {
    return exports.reflection.isInstance(item, exports.Test);
}
exports.isTest = isTest;
exports.TestData = 'TestData';
function isTestData(item) {
    return exports.reflection.isInstance(item, exports.TestData);
}
exports.isTestData = isTestData;
exports.TestElement = 'TestElement';
function isTestElement(item) {
    return exports.reflection.isInstance(item, exports.TestElement);
}
exports.isTestElement = isTestElement;
exports.TestScenarioType = 'TestScenarioType';
function isTestScenarioType(item) {
    return exports.reflection.isInstance(item, exports.TestScenarioType);
}
exports.isTestScenarioType = isTestScenarioType;
exports.TestsRelationType = 'TestsRelationType';
function isTestsRelationType(item) {
    return exports.reflection.isInstance(item, exports.TestsRelationType);
}
exports.isTestsRelationType = isTestsRelationType;
exports.TestSuiteSetupTeardown = 'TestSuiteSetupTeardown';
function isTestSuiteSetupTeardown(item) {
    return exports.reflection.isInstance(item, exports.TestSuiteSetupTeardown);
}
exports.isTestSuiteSetupTeardown = isTestSuiteSetupTeardown;
exports.TestType = 'TestType';
function isTestType(item) {
    return exports.reflection.isInstance(item, exports.TestType);
}
exports.isTestType = isTestType;
exports.TypeExtended = 'TypeExtended';
function isTypeExtended(item) {
    return exports.reflection.isInstance(item, exports.TypeExtended);
}
exports.isTypeExtended = isTypeExtended;
exports.UseCaseType = 'UseCaseType';
function isUseCaseType(item) {
    return exports.reflection.isInstance(item, exports.UseCaseType);
}
exports.isUseCaseType = isUseCaseType;
exports.UserStoryType = 'UserStoryType';
function isUserStoryType(item) {
    return exports.reflection.isInstance(item, exports.UserStoryType);
}
exports.isUserStoryType = isUserStoryType;
exports.VulnerabilityAttackVector = 'VulnerabilityAttackVector';
function isVulnerabilityAttackVector(item) {
    return exports.reflection.isInstance(item, exports.VulnerabilityAttackVector);
}
exports.isVulnerabilityAttackVector = isVulnerabilityAttackVector;
exports.VulnerabilitySubType = 'VulnerabilitySubType';
function isVulnerabilitySubType(item) {
    return exports.reflection.isInstance(item, exports.VulnerabilitySubType);
}
exports.isVulnerabilitySubType = isVulnerabilitySubType;
exports.VulnerabilityType = 'VulnerabilityType';
function isVulnerabilityType(item) {
    return exports.reflection.isInstance(item, exports.VulnerabilityType);
}
exports.isVulnerabilityType = isVulnerabilityType;
exports.AcceptanceCriteria = 'AcceptanceCriteria';
function isAcceptanceCriteria(item) {
    return exports.reflection.isInstance(item, exports.AcceptanceCriteria);
}
exports.isAcceptanceCriteria = isAcceptanceCriteria;
exports.AcceptanceCriteriaRule = 'AcceptanceCriteriaRule';
function isAcceptanceCriteriaRule(item) {
    return exports.reflection.isInstance(item, exports.AcceptanceCriteriaRule);
}
exports.isAcceptanceCriteriaRule = isAcceptanceCriteriaRule;
exports.AcceptanceCriteriaScenario = 'AcceptanceCriteriaScenario';
function isAcceptanceCriteriaScenario(item) {
    return exports.reflection.isInstance(item, exports.AcceptanceCriteriaScenario);
}
exports.isAcceptanceCriteriaScenario = isAcceptanceCriteriaScenario;
exports.AcceptanceCriteriaTest = 'AcceptanceCriteriaTest';
function isAcceptanceCriteriaTest(item) {
    return exports.reflection.isInstance(item, exports.AcceptanceCriteriaTest);
}
exports.isAcceptanceCriteriaTest = isAcceptanceCriteriaTest;
exports.ActionTypeExtended = 'ActionTypeExtended';
function isActionTypeExtended(item) {
    return exports.reflection.isInstance(item, exports.ActionTypeExtended);
}
exports.isActionTypeExtended = isActionTypeExtended;
exports.ActionTypeExtendedRef = 'ActionTypeExtendedRef';
function isActionTypeExtendedRef(item) {
    return exports.reflection.isInstance(item, exports.ActionTypeExtendedRef);
}
exports.isActionTypeExtendedRef = isActionTypeExtendedRef;
exports.ActionTypeOriginal = 'ActionTypeOriginal';
function isActionTypeOriginal(item) {
    return exports.reflection.isInstance(item, exports.ActionTypeOriginal);
}
exports.isActionTypeOriginal = isActionTypeOriginal;
exports.ActiveEvent = 'ActiveEvent';
function isActiveEvent(item) {
    return exports.reflection.isInstance(item, exports.ActiveEvent);
}
exports.isActiveEvent = isActiveEvent;
exports.ActiveEventTypeExtended = 'ActiveEventTypeExtended';
function isActiveEventTypeExtended(item) {
    return exports.reflection.isInstance(item, exports.ActiveEventTypeExtended);
}
exports.isActiveEventTypeExtended = isActiveEventTypeExtended;
exports.ActiveEventTypeExtendedRef = 'ActiveEventTypeExtendedRef';
function isActiveEventTypeExtendedRef(item) {
    return exports.reflection.isInstance(item, exports.ActiveEventTypeExtendedRef);
}
exports.isActiveEventTypeExtendedRef = isActiveEventTypeExtendedRef;
exports.ActiveEventTypeOriginal = 'ActiveEventTypeOriginal';
function isActiveEventTypeOriginal(item) {
    return exports.reflection.isInstance(item, exports.ActiveEventTypeOriginal);
}
exports.isActiveEventTypeOriginal = isActiveEventTypeOriginal;
exports.ActiveFlow = 'ActiveFlow';
function isActiveFlow(item) {
    return exports.reflection.isInstance(item, exports.ActiveFlow);
}
exports.isActiveFlow = isActiveFlow;
exports.ActiveFlowTypeExtended = 'ActiveFlowTypeExtended';
function isActiveFlowTypeExtended(item) {
    return exports.reflection.isInstance(item, exports.ActiveFlowTypeExtended);
}
exports.isActiveFlowTypeExtended = isActiveFlowTypeExtended;
exports.ActiveFlowTypeExtendedRef = 'ActiveFlowTypeExtendedRef';
function isActiveFlowTypeExtendedRef(item) {
    return exports.reflection.isInstance(item, exports.ActiveFlowTypeExtendedRef);
}
exports.isActiveFlowTypeExtendedRef = isActiveFlowTypeExtendedRef;
exports.ActiveFlowTypeOriginal = 'ActiveFlowTypeOriginal';
function isActiveFlowTypeOriginal(item) {
    return exports.reflection.isInstance(item, exports.ActiveFlowTypeOriginal);
}
exports.isActiveFlowTypeOriginal = isActiveFlowTypeOriginal;
exports.ActiveTask = 'ActiveTask';
function isActiveTask(item) {
    return exports.reflection.isInstance(item, exports.ActiveTask);
}
exports.isActiveTask = isActiveTask;
exports.ActiveTaskTypeExtended = 'ActiveTaskTypeExtended';
function isActiveTaskTypeExtended(item) {
    return exports.reflection.isInstance(item, exports.ActiveTaskTypeExtended);
}
exports.isActiveTaskTypeExtended = isActiveTaskTypeExtended;
exports.ActiveTaskTypeExtendedRef = 'ActiveTaskTypeExtendedRef';
function isActiveTaskTypeExtendedRef(item) {
    return exports.reflection.isInstance(item, exports.ActiveTaskTypeExtendedRef);
}
exports.isActiveTaskTypeExtendedRef = isActiveTaskTypeExtendedRef;
exports.ActiveTaskTypeOriginal = 'ActiveTaskTypeOriginal';
function isActiveTaskTypeOriginal(item) {
    return exports.reflection.isInstance(item, exports.ActiveTaskTypeOriginal);
}
exports.isActiveTaskTypeOriginal = isActiveTaskTypeOriginal;
exports.Actor = 'Actor';
function isActor(item) {
    return exports.reflection.isInstance(item, exports.Actor);
}
exports.isActor = isActor;
exports.ActorTypeExtended = 'ActorTypeExtended';
function isActorTypeExtended(item) {
    return exports.reflection.isInstance(item, exports.ActorTypeExtended);
}
exports.isActorTypeExtended = isActorTypeExtended;
exports.ActorTypeExtendedRef = 'ActorTypeExtendedRef';
function isActorTypeExtendedRef(item) {
    return exports.reflection.isInstance(item, exports.ActorTypeExtendedRef);
}
exports.isActorTypeExtendedRef = isActorTypeExtendedRef;
exports.ActorTypeOriginal = 'ActorTypeOriginal';
function isActorTypeOriginal(item) {
    return exports.reflection.isInstance(item, exports.ActorTypeOriginal);
}
exports.isActorTypeOriginal = isActorTypeOriginal;
exports.AttributeValue = 'AttributeValue';
function isAttributeValue(item) {
    return exports.reflection.isInstance(item, exports.AttributeValue);
}
exports.isAttributeValue = isAttributeValue;
exports.Boolean = 'Boolean';
function isBoolean(item) {
    return exports.reflection.isInstance(item, exports.Boolean);
}
exports.isBoolean = isBoolean;
exports.Check = 'Check';
function isCheck(item) {
    return exports.reflection.isInstance(item, exports.Check);
}
exports.isCheck = isCheck;
exports.ChildDataEntity = 'ChildDataEntity';
function isChildDataEntity(item) {
    return exports.reflection.isInstance(item, exports.ChildDataEntity);
}
exports.isChildDataEntity = isChildDataEntity;
exports.Constraint = 'Constraint';
function isConstraint(item) {
    return exports.reflection.isInstance(item, exports.Constraint);
}
exports.isConstraint = isConstraint;
exports.ConstraintSubTypeExtended = 'ConstraintSubTypeExtended';
function isConstraintSubTypeExtended(item) {
    return exports.reflection.isInstance(item, exports.ConstraintSubTypeExtended);
}
exports.isConstraintSubTypeExtended = isConstraintSubTypeExtended;
exports.ConstraintSubTypeExtendedRef = 'ConstraintSubTypeExtendedRef';
function isConstraintSubTypeExtendedRef(item) {
    return exports.reflection.isInstance(item, exports.ConstraintSubTypeExtendedRef);
}
exports.isConstraintSubTypeExtendedRef = isConstraintSubTypeExtendedRef;
exports.ConstraintSubTypeOriginal = 'ConstraintSubTypeOriginal';
function isConstraintSubTypeOriginal(item) {
    return exports.reflection.isInstance(item, exports.ConstraintSubTypeOriginal);
}
exports.isConstraintSubTypeOriginal = isConstraintSubTypeOriginal;
exports.ConstraintTypeExtended = 'ConstraintTypeExtended';
function isConstraintTypeExtended(item) {
    return exports.reflection.isInstance(item, exports.ConstraintTypeExtended);
}
exports.isConstraintTypeExtended = isConstraintTypeExtended;
exports.ConstraintTypeExtendedRef = 'ConstraintTypeExtendedRef';
function isConstraintTypeExtendedRef(item) {
    return exports.reflection.isInstance(item, exports.ConstraintTypeExtendedRef);
}
exports.isConstraintTypeExtendedRef = isConstraintTypeExtendedRef;
exports.ConstraintTypeOriginal = 'ConstraintTypeOriginal';
function isConstraintTypeOriginal(item) {
    return exports.reflection.isInstance(item, exports.ConstraintTypeOriginal);
}
exports.isConstraintTypeOriginal = isConstraintTypeOriginal;
exports.Data = 'Data';
function isData(item) {
    return exports.reflection.isInstance(item, exports.Data);
}
exports.isData = isData;
exports.DataAttribute = 'DataAttribute';
function isDataAttribute(item) {
    return exports.reflection.isInstance(item, exports.DataAttribute);
}
exports.isDataAttribute = isDataAttribute;
exports.DataAttributeConstraint = 'DataAttributeConstraint';
function isDataAttributeConstraint(item) {
    return exports.reflection.isInstance(item, exports.DataAttributeConstraint);
}
exports.isDataAttributeConstraint = isDataAttributeConstraint;
exports.DataAttributeRefsList = 'DataAttributeRefsList';
function isDataAttributeRefsList(item) {
    return exports.reflection.isInstance(item, exports.DataAttributeRefsList);
}
exports.isDataAttributeRefsList = isDataAttributeRefsList;
exports.DataAttributeType = 'DataAttributeType';
function isDataAttributeType(item) {
    return exports.reflection.isInstance(item, exports.DataAttributeType);
}
exports.isDataAttributeType = isDataAttributeType;
exports.DataAttributeTypeExtended = 'DataAttributeTypeExtended';
function isDataAttributeTypeExtended(item) {
    return exports.reflection.isInstance(item, exports.DataAttributeTypeExtended);
}
exports.isDataAttributeTypeExtended = isDataAttributeTypeExtended;
exports.DataEntity = 'DataEntity';
function isDataEntity(item) {
    return exports.reflection.isInstance(item, exports.DataEntity);
}
exports.isDataEntity = isDataEntity;
exports.DataEntityCluster = 'DataEntityCluster';
function isDataEntityCluster(item) {
    return exports.reflection.isInstance(item, exports.DataEntityCluster);
}
exports.isDataEntityCluster = isDataEntityCluster;
exports.DataEntityClusterTypeExtended = 'DataEntityClusterTypeExtended';
function isDataEntityClusterTypeExtended(item) {
    return exports.reflection.isInstance(item, exports.DataEntityClusterTypeExtended);
}
exports.isDataEntityClusterTypeExtended = isDataEntityClusterTypeExtended;
exports.DataEntityClusterTypeExtendedRef = 'DataEntityClusterTypeExtendedRef';
function isDataEntityClusterTypeExtendedRef(item) {
    return exports.reflection.isInstance(item, exports.DataEntityClusterTypeExtendedRef);
}
exports.isDataEntityClusterTypeExtendedRef = isDataEntityClusterTypeExtendedRef;
exports.DataEntityClusterTypeOriginal = 'DataEntityClusterTypeOriginal';
function isDataEntityClusterTypeOriginal(item) {
    return exports.reflection.isInstance(item, exports.DataEntityClusterTypeOriginal);
}
exports.isDataEntityClusterTypeOriginal = isDataEntityClusterTypeOriginal;
exports.DataEntityConstraint = 'DataEntityConstraint';
function isDataEntityConstraint(item) {
    return exports.reflection.isInstance(item, exports.DataEntityConstraint);
}
exports.isDataEntityConstraint = isDataEntityConstraint;
exports.DataEntitySubTypeExtended = 'DataEntitySubTypeExtended';
function isDataEntitySubTypeExtended(item) {
    return exports.reflection.isInstance(item, exports.DataEntitySubTypeExtended);
}
exports.isDataEntitySubTypeExtended = isDataEntitySubTypeExtended;
exports.DataEntitySubTypeExtendedRef = 'DataEntitySubTypeExtendedRef';
function isDataEntitySubTypeExtendedRef(item) {
    return exports.reflection.isInstance(item, exports.DataEntitySubTypeExtendedRef);
}
exports.isDataEntitySubTypeExtendedRef = isDataEntitySubTypeExtendedRef;
exports.DataEntitySubTypeOriginal = 'DataEntitySubTypeOriginal';
function isDataEntitySubTypeOriginal(item) {
    return exports.reflection.isInstance(item, exports.DataEntitySubTypeOriginal);
}
exports.isDataEntitySubTypeOriginal = isDataEntitySubTypeOriginal;
exports.DataEntityTest = 'DataEntityTest';
function isDataEntityTest(item) {
    return exports.reflection.isInstance(item, exports.DataEntityTest);
}
exports.isDataEntityTest = isDataEntityTest;
exports.DataEntityTypeExtended = 'DataEntityTypeExtended';
function isDataEntityTypeExtended(item) {
    return exports.reflection.isInstance(item, exports.DataEntityTypeExtended);
}
exports.isDataEntityTypeExtended = isDataEntityTypeExtended;
exports.DataEntityTypeExtendedRef = 'DataEntityTypeExtendedRef';
function isDataEntityTypeExtendedRef(item) {
    return exports.reflection.isInstance(item, exports.DataEntityTypeExtendedRef);
}
exports.isDataEntityTypeExtendedRef = isDataEntityTypeExtendedRef;
exports.DataEntityTypeOriginal = 'DataEntityTypeOriginal';
function isDataEntityTypeOriginal(item) {
    return exports.reflection.isInstance(item, exports.DataEntityTypeOriginal);
}
exports.isDataEntityTypeOriginal = isDataEntityTypeOriginal;
exports.DataEnumeration = 'DataEnumeration';
function isDataEnumeration(item) {
    return exports.reflection.isInstance(item, exports.DataEnumeration);
}
exports.isDataEnumeration = isDataEnumeration;
exports.DataEnumerationElement = 'DataEnumerationElement';
function isDataEnumerationElement(item) {
    return exports.reflection.isInstance(item, exports.DataEnumerationElement);
}
exports.isDataEnumerationElement = isDataEnumerationElement;
exports.DataTable = 'DataTable';
function isDataTable(item) {
    return exports.reflection.isInstance(item, exports.DataTable);
}
exports.isDataTable = isDataTable;
exports.DataTableHeader = 'DataTableHeader';
function isDataTableHeader(item) {
    return exports.reflection.isInstance(item, exports.DataTableHeader);
}
exports.isDataTableHeader = isDataTableHeader;
exports.DataTableRow = 'DataTableRow';
function isDataTableRow(item) {
    return exports.reflection.isInstance(item, exports.DataTableRow);
}
exports.isDataTableRow = isDataTableRow;
exports.DateRule = 'DateRule';
function isDateRule(item) {
    return exports.reflection.isInstance(item, exports.DateRule);
}
exports.isDateRule = isDateRule;
exports.DateTime = 'DateTime';
function isDateTime(item) {
    return exports.reflection.isInstance(item, exports.DateTime);
}
exports.isDateTime = isDateTime;
exports.ElementsRelation = 'ElementsRelation';
function isElementsRelation(item) {
    return exports.reflection.isInstance(item, exports.ElementsRelation);
}
exports.isElementsRelation = isElementsRelation;
exports.ElementsRelationType = 'ElementsRelationType';
function isElementsRelationType(item) {
    return exports.reflection.isInstance(item, exports.ElementsRelationType);
}
exports.isElementsRelationType = isElementsRelationType;
exports.Expression = 'Expression';
function isExpression(item) {
    return exports.reflection.isInstance(item, exports.Expression);
}
exports.isExpression = isExpression;
exports.ExpressionOperator = 'ExpressionOperator';
function isExpressionOperator(item) {
    return exports.reflection.isInstance(item, exports.ExpressionOperator);
}
exports.isExpressionOperator = isExpressionOperator;
exports.ForeignKey = 'ForeignKey';
function isForeignKey(item) {
    return exports.reflection.isInstance(item, exports.ForeignKey);
}
exports.isForeignKey = isForeignKey;
exports.ForeignKeyOnDeleteTypeExtended = 'ForeignKeyOnDeleteTypeExtended';
function isForeignKeyOnDeleteTypeExtended(item) {
    return exports.reflection.isInstance(item, exports.ForeignKeyOnDeleteTypeExtended);
}
exports.isForeignKeyOnDeleteTypeExtended = isForeignKeyOnDeleteTypeExtended;
exports.ForeignKeyOnDeleteTypeExtendedRef = 'ForeignKeyOnDeleteTypeExtendedRef';
function isForeignKeyOnDeleteTypeExtendedRef(item) {
    return exports.reflection.isInstance(item, exports.ForeignKeyOnDeleteTypeExtendedRef);
}
exports.isForeignKeyOnDeleteTypeExtendedRef = isForeignKeyOnDeleteTypeExtendedRef;
exports.ForeignKeyOnDeleteTypeOriginal = 'ForeignKeyOnDeleteTypeOriginal';
function isForeignKeyOnDeleteTypeOriginal(item) {
    return exports.reflection.isInstance(item, exports.ForeignKeyOnDeleteTypeOriginal);
}
exports.isForeignKeyOnDeleteTypeOriginal = isForeignKeyOnDeleteTypeOriginal;
exports.FR = 'FR';
function isFR(item) {
    return exports.reflection.isInstance(item, exports.FR);
}
exports.isFR = isFR;
exports.FRTypeExtended = 'FRTypeExtended';
function isFRTypeExtended(item) {
    return exports.reflection.isInstance(item, exports.FRTypeExtended);
}
exports.isFRTypeExtended = isFRTypeExtended;
exports.FRTypeExtendedRef = 'FRTypeExtendedRef';
function isFRTypeExtendedRef(item) {
    return exports.reflection.isInstance(item, exports.FRTypeExtendedRef);
}
exports.isFRTypeExtendedRef = isFRTypeExtendedRef;
exports.FRTypeOriginal = 'FRTypeOriginal';
function isFRTypeOriginal(item) {
    return exports.reflection.isInstance(item, exports.FRTypeOriginal);
}
exports.isFRTypeOriginal = isFRTypeOriginal;
exports.GlossaryTerm = 'GlossaryTerm';
function isGlossaryTerm(item) {
    return exports.reflection.isInstance(item, exports.GlossaryTerm);
}
exports.isGlossaryTerm = isGlossaryTerm;
exports.GlossaryTermTypeExtended = 'GlossaryTermTypeExtended';
function isGlossaryTermTypeExtended(item) {
    return exports.reflection.isInstance(item, exports.GlossaryTermTypeExtended);
}
exports.isGlossaryTermTypeExtended = isGlossaryTermTypeExtended;
exports.GlossaryTermTypeExtendedRef = 'GlossaryTermTypeExtendedRef';
function isGlossaryTermTypeExtendedRef(item) {
    return exports.reflection.isInstance(item, exports.GlossaryTermTypeExtendedRef);
}
exports.isGlossaryTermTypeExtendedRef = isGlossaryTermTypeExtendedRef;
exports.GlossaryTermTypeOriginal = 'GlossaryTermTypeOriginal';
function isGlossaryTermTypeOriginal(item) {
    return exports.reflection.isInstance(item, exports.GlossaryTermTypeOriginal);
}
exports.isGlossaryTermTypeOriginal = isGlossaryTermTypeOriginal;
exports.Goal = 'Goal';
function isGoal(item) {
    return exports.reflection.isInstance(item, exports.Goal);
}
exports.isGoal = isGoal;
exports.GoalSubTypeExtended = 'GoalSubTypeExtended';
function isGoalSubTypeExtended(item) {
    return exports.reflection.isInstance(item, exports.GoalSubTypeExtended);
}
exports.isGoalSubTypeExtended = isGoalSubTypeExtended;
exports.GoalSubTypeExtendedRef = 'GoalSubTypeExtendedRef';
function isGoalSubTypeExtendedRef(item) {
    return exports.reflection.isInstance(item, exports.GoalSubTypeExtendedRef);
}
exports.isGoalSubTypeExtendedRef = isGoalSubTypeExtendedRef;
exports.GoalSubTypeOriginal = 'GoalSubTypeOriginal';
function isGoalSubTypeOriginal(item) {
    return exports.reflection.isInstance(item, exports.GoalSubTypeOriginal);
}
exports.isGoalSubTypeOriginal = isGoalSubTypeOriginal;
exports.GoalTypeExtended = 'GoalTypeExtended';
function isGoalTypeExtended(item) {
    return exports.reflection.isInstance(item, exports.GoalTypeExtended);
}
exports.isGoalTypeExtended = isGoalTypeExtended;
exports.GoalTypeExtendedRef = 'GoalTypeExtendedRef';
function isGoalTypeExtendedRef(item) {
    return exports.reflection.isInstance(item, exports.GoalTypeExtendedRef);
}
exports.isGoalTypeExtendedRef = isGoalTypeExtendedRef;
exports.GoalTypeOriginal = 'GoalTypeOriginal';
function isGoalTypeOriginal(item) {
    return exports.reflection.isInstance(item, exports.GoalTypeOriginal);
}
exports.isGoalTypeOriginal = isGoalTypeOriginal;
exports.ImpactLevel = 'ImpactLevel';
function isImpactLevel(item) {
    return exports.reflection.isInstance(item, exports.ImpactLevel);
}
exports.isImpactLevel = isImpactLevel;
exports.Import = 'Import';
function isImport(item) {
    return exports.reflection.isInstance(item, exports.Import);
}
exports.isImport = isImport;
exports.IncludeAll = 'IncludeAll';
function isIncludeAll(item) {
    return exports.reflection.isInstance(item, exports.IncludeAll);
}
exports.isIncludeAll = isIncludeAll;
exports.IncludeElement = 'IncludeElement';
function isIncludeElement(item) {
    return exports.reflection.isInstance(item, exports.IncludeElement);
}
exports.isIncludeElement = isIncludeElement;
exports.IncludeSystemElementType = 'IncludeSystemElementType';
function isIncludeSystemElementType(item) {
    return exports.reflection.isInstance(item, exports.IncludeSystemElementType);
}
exports.isIncludeSystemElementType = isIncludeSystemElementType;
exports.LinguisticFragment = 'LinguisticFragment';
function isLinguisticFragment(item) {
    return exports.reflection.isInstance(item, exports.LinguisticFragment);
}
exports.isLinguisticFragment = isLinguisticFragment;
exports.LinguisticFragmentRef = 'LinguisticFragmentRef';
function isLinguisticFragmentRef(item) {
    return exports.reflection.isInstance(item, exports.LinguisticFragmentRef);
}
exports.isLinguisticFragmentRef = isLinguisticFragmentRef;
exports.LinguisticLanguage = 'LinguisticLanguage';
function isLinguisticLanguage(item) {
    return exports.reflection.isInstance(item, exports.LinguisticLanguage);
}
exports.isLinguisticLanguage = isLinguisticLanguage;
exports.LinguisticPattern = 'LinguisticPattern';
function isLinguisticPattern(item) {
    return exports.reflection.isInstance(item, exports.LinguisticPattern);
}
exports.isLinguisticPattern = isLinguisticPattern;
exports.LinguisticRule = 'LinguisticRule';
function isLinguisticRule(item) {
    return exports.reflection.isInstance(item, exports.LinguisticRule);
}
exports.isLinguisticRule = isLinguisticRule;
exports.LinguisticRuleElement = 'LinguisticRuleElement';
function isLinguisticRuleElement(item) {
    return exports.reflection.isInstance(item, exports.LinguisticRuleElement);
}
exports.isLinguisticRuleElement = isLinguisticRuleElement;
exports.LinguisticRuleElementAndProperty = 'LinguisticRuleElementAndProperty';
function isLinguisticRuleElementAndProperty(item) {
    return exports.reflection.isInstance(item, exports.LinguisticRuleElementAndProperty);
}
exports.isLinguisticRuleElementAndProperty = isLinguisticRuleElementAndProperty;
exports.LinguisticRuleType = 'LinguisticRuleType';
function isLinguisticRuleType(item) {
    return exports.reflection.isInstance(item, exports.LinguisticRuleType);
}
exports.isLinguisticRuleType = isLinguisticRuleType;
exports.MainScenario = 'MainScenario';
function isMainScenario(item) {
    return exports.reflection.isInstance(item, exports.MainScenario);
}
exports.isMainScenario = isMainScenario;
exports.ManyToMany = 'ManyToMany';
function isManyToMany(item) {
    return exports.reflection.isInstance(item, exports.ManyToMany);
}
exports.isManyToMany = isManyToMany;
exports.MetricTypeExtended = 'MetricTypeExtended';
function isMetricTypeExtended(item) {
    return exports.reflection.isInstance(item, exports.MetricTypeExtended);
}
exports.isMetricTypeExtended = isMetricTypeExtended;
exports.MetricTypeExtendedRef = 'MetricTypeExtendedRef';
function isMetricTypeExtendedRef(item) {
    return exports.reflection.isInstance(item, exports.MetricTypeExtendedRef);
}
exports.isMetricTypeExtendedRef = isMetricTypeExtendedRef;
exports.MetricTypeOriginal = 'MetricTypeOriginal';
function isMetricTypeOriginal(item) {
    return exports.reflection.isInstance(item, exports.MetricTypeOriginal);
}
exports.isMetricTypeOriginal = isMetricTypeOriginal;
exports.Model = 'Model';
function isModel(item) {
    return exports.reflection.isInstance(item, exports.Model);
}
exports.isModel = isModel;
exports.Month = 'Month';
function isMonth(item) {
    return exports.reflection.isInstance(item, exports.Month);
}
exports.isMonth = isMonth;
exports.Multiplicity = 'Multiplicity';
function isMultiplicity(item) {
    return exports.reflection.isInstance(item, exports.Multiplicity);
}
exports.isMultiplicity = isMultiplicity;
exports.PackageSystem = 'PackageSystem';
function isPackageSystem(item) {
    return exports.reflection.isInstance(item, exports.PackageSystem);
}
exports.isPackageSystem = isPackageSystem;
exports.PartOfSpeech = 'PartOfSpeech';
function isPartOfSpeech(item) {
    return exports.reflection.isInstance(item, exports.PartOfSpeech);
}
exports.isPartOfSpeech = isPartOfSpeech;
exports.PriorityTypeExtended = 'PriorityTypeExtended';
function isPriorityTypeExtended(item) {
    return exports.reflection.isInstance(item, exports.PriorityTypeExtended);
}
exports.isPriorityTypeExtended = isPriorityTypeExtended;
exports.PriorityTypeExtendedRef = 'PriorityTypeExtendedRef';
function isPriorityTypeExtendedRef(item) {
    return exports.reflection.isInstance(item, exports.PriorityTypeExtendedRef);
}
exports.isPriorityTypeExtendedRef = isPriorityTypeExtendedRef;
exports.PriorityTypeOriginal = 'PriorityTypeOriginal';
function isPriorityTypeOriginal(item) {
    return exports.reflection.isInstance(item, exports.PriorityTypeOriginal);
}
exports.isPriorityTypeOriginal = isPriorityTypeOriginal;
exports.QR = 'QR';
function isQR(item) {
    return exports.reflection.isInstance(item, exports.QR);
}
exports.isQR = isQR;
exports.QRSubTypeExtended = 'QRSubTypeExtended';
function isQRSubTypeExtended(item) {
    return exports.reflection.isInstance(item, exports.QRSubTypeExtended);
}
exports.isQRSubTypeExtended = isQRSubTypeExtended;
exports.QRSubTypeExtendedRef = 'QRSubTypeExtendedRef';
function isQRSubTypeExtendedRef(item) {
    return exports.reflection.isInstance(item, exports.QRSubTypeExtendedRef);
}
exports.isQRSubTypeExtendedRef = isQRSubTypeExtendedRef;
exports.QRSubTypeOriginal = 'QRSubTypeOriginal';
function isQRSubTypeOriginal(item) {
    return exports.reflection.isInstance(item, exports.QRSubTypeOriginal);
}
exports.isQRSubTypeOriginal = isQRSubTypeOriginal;
exports.QRTypeExtended = 'QRTypeExtended';
function isQRTypeExtended(item) {
    return exports.reflection.isInstance(item, exports.QRTypeExtended);
}
exports.isQRTypeExtended = isQRTypeExtended;
exports.QRTypeExtendedRef = 'QRTypeExtendedRef';
function isQRTypeExtendedRef(item) {
    return exports.reflection.isInstance(item, exports.QRTypeExtendedRef);
}
exports.isQRTypeExtendedRef = isQRTypeExtendedRef;
exports.QRTypeOriginal = 'QRTypeOriginal';
function isQRTypeOriginal(item) {
    return exports.reflection.isInstance(item, exports.QRTypeOriginal);
}
exports.isQRTypeOriginal = isQRTypeOriginal;
exports.RefActiveElement = 'RefActiveElement';
function isRefActiveElement(item) {
    return exports.reflection.isInstance(item, exports.RefActiveElement);
}
exports.isRefActiveElement = isRefActiveElement;
exports.RefActor = 'RefActor';
function isRefActor(item) {
    return exports.reflection.isInstance(item, exports.RefActor);
}
exports.isRefActor = isRefActor;
exports.RefDataEntity = 'RefDataEntity';
function isRefDataEntity(item) {
    return exports.reflection.isInstance(item, exports.RefDataEntity);
}
exports.isRefDataEntity = isRefDataEntity;
exports.ReferenceElements = 'ReferenceElements';
function isReferenceElements(item) {
    return exports.reflection.isInstance(item, exports.ReferenceElements);
}
exports.isReferenceElements = isReferenceElements;
exports.RefRequirements = 'RefRequirements';
function isRefRequirements(item) {
    return exports.reflection.isInstance(item, exports.RefRequirements);
}
exports.isRefRequirements = isRefRequirements;
exports.RefTermApplicableTo = 'RefTermApplicableTo';
function isRefTermApplicableTo(item) {
    return exports.reflection.isInstance(item, exports.RefTermApplicableTo);
}
exports.isRefTermApplicableTo = isRefTermApplicableTo;
exports.RefUC = 'RefUC';
function isRefUC(item) {
    return exports.reflection.isInstance(item, exports.RefUC);
}
exports.isRefUC = isRefUC;
exports.RefUCAction = 'RefUCAction';
function isRefUCAction(item) {
    return exports.reflection.isInstance(item, exports.RefUCAction);
}
exports.isRefUCAction = isRefUCAction;
exports.RelationTypeExtended = 'RelationTypeExtended';
function isRelationTypeExtended(item) {
    return exports.reflection.isInstance(item, exports.RelationTypeExtended);
}
exports.isRelationTypeExtended = isRelationTypeExtended;
exports.RelationTypeExtendedRef = 'RelationTypeExtendedRef';
function isRelationTypeExtendedRef(item) {
    return exports.reflection.isInstance(item, exports.RelationTypeExtendedRef);
}
exports.isRelationTypeExtendedRef = isRelationTypeExtendedRef;
exports.RelationTypeOriginal = 'RelationTypeOriginal';
function isRelationTypeOriginal(item) {
    return exports.reflection.isInstance(item, exports.RelationTypeOriginal);
}
exports.isRelationTypeOriginal = isRelationTypeOriginal;
exports.RequirementsRelation = 'RequirementsRelation';
function isRequirementsRelation(item) {
    return exports.reflection.isInstance(item, exports.RequirementsRelation);
}
exports.isRequirementsRelation = isRequirementsRelation;
exports.RequirementsRelationTypeExtended = 'RequirementsRelationTypeExtended';
function isRequirementsRelationTypeExtended(item) {
    return exports.reflection.isInstance(item, exports.RequirementsRelationTypeExtended);
}
exports.isRequirementsRelationTypeExtended = isRequirementsRelationTypeExtended;
exports.RequirementsRelationTypeExtendedRef = 'RequirementsRelationTypeExtendedRef';
function isRequirementsRelationTypeExtendedRef(item) {
    return exports.reflection.isInstance(item, exports.RequirementsRelationTypeExtendedRef);
}
exports.isRequirementsRelationTypeExtendedRef = isRequirementsRelationTypeExtendedRef;
exports.RequirementsRelationTypeOriginal = 'RequirementsRelationTypeOriginal';
function isRequirementsRelationTypeOriginal(item) {
    return exports.reflection.isInstance(item, exports.RequirementsRelationTypeOriginal);
}
exports.isRequirementsRelationTypeOriginal = isRequirementsRelationTypeOriginal;
exports.Risk = 'Risk';
function isRisk(item) {
    return exports.reflection.isInstance(item, exports.Risk);
}
exports.isRisk = isRisk;
exports.RiskAssessment = 'RiskAssessment';
function isRiskAssessment(item) {
    return exports.reflection.isInstance(item, exports.RiskAssessment);
}
exports.isRiskAssessment = isRiskAssessment;
exports.RiskStatus = 'RiskStatus';
function isRiskStatus(item) {
    return exports.reflection.isInstance(item, exports.RiskStatus);
}
exports.isRiskStatus = isRiskStatus;
exports.RiskSubTypeExtended = 'RiskSubTypeExtended';
function isRiskSubTypeExtended(item) {
    return exports.reflection.isInstance(item, exports.RiskSubTypeExtended);
}
exports.isRiskSubTypeExtended = isRiskSubTypeExtended;
exports.RiskSubTypeExtendedRef = 'RiskSubTypeExtendedRef';
function isRiskSubTypeExtendedRef(item) {
    return exports.reflection.isInstance(item, exports.RiskSubTypeExtendedRef);
}
exports.isRiskSubTypeExtendedRef = isRiskSubTypeExtendedRef;
exports.RiskSubTypeOriginal = 'RiskSubTypeOriginal';
function isRiskSubTypeOriginal(item) {
    return exports.reflection.isInstance(item, exports.RiskSubTypeOriginal);
}
exports.isRiskSubTypeOriginal = isRiskSubTypeOriginal;
exports.RiskTreatment = 'RiskTreatment';
function isRiskTreatment(item) {
    return exports.reflection.isInstance(item, exports.RiskTreatment);
}
exports.isRiskTreatment = isRiskTreatment;
exports.RiskTreatmentTypeExtended = 'RiskTreatmentTypeExtended';
function isRiskTreatmentTypeExtended(item) {
    return exports.reflection.isInstance(item, exports.RiskTreatmentTypeExtended);
}
exports.isRiskTreatmentTypeExtended = isRiskTreatmentTypeExtended;
exports.RiskTreatmentTypeExtendedRef = 'RiskTreatmentTypeExtendedRef';
function isRiskTreatmentTypeExtendedRef(item) {
    return exports.reflection.isInstance(item, exports.RiskTreatmentTypeExtendedRef);
}
exports.isRiskTreatmentTypeExtendedRef = isRiskTreatmentTypeExtendedRef;
exports.RiskTreatmentTypeOriginal = 'RiskTreatmentTypeOriginal';
function isRiskTreatmentTypeOriginal(item) {
    return exports.reflection.isInstance(item, exports.RiskTreatmentTypeOriginal);
}
exports.isRiskTreatmentTypeOriginal = isRiskTreatmentTypeOriginal;
exports.RiskTypeExtended = 'RiskTypeExtended';
function isRiskTypeExtended(item) {
    return exports.reflection.isInstance(item, exports.RiskTypeExtended);
}
exports.isRiskTypeExtended = isRiskTypeExtended;
exports.RiskTypeExtendedRef = 'RiskTypeExtendedRef';
function isRiskTypeExtendedRef(item) {
    return exports.reflection.isInstance(item, exports.RiskTypeExtendedRef);
}
exports.isRiskTypeExtendedRef = isRiskTypeExtendedRef;
exports.RiskTypeOriginal = 'RiskTypeOriginal';
function isRiskTypeOriginal(item) {
    return exports.reflection.isInstance(item, exports.RiskTypeOriginal);
}
exports.isRiskTypeOriginal = isRiskTypeOriginal;
exports.Scenario = 'Scenario';
function isScenario(item) {
    return exports.reflection.isInstance(item, exports.Scenario);
}
exports.isScenario = isScenario;
exports.ScenarioTypeExtended = 'ScenarioTypeExtended';
function isScenarioTypeExtended(item) {
    return exports.reflection.isInstance(item, exports.ScenarioTypeExtended);
}
exports.isScenarioTypeExtended = isScenarioTypeExtended;
exports.ScenarioTypeExtendedRef = 'ScenarioTypeExtendedRef';
function isScenarioTypeExtendedRef(item) {
    return exports.reflection.isInstance(item, exports.ScenarioTypeExtendedRef);
}
exports.isScenarioTypeExtendedRef = isScenarioTypeExtendedRef;
exports.ScenarioTypeOriginal = 'ScenarioTypeOriginal';
function isScenarioTypeOriginal(item) {
    return exports.reflection.isInstance(item, exports.ScenarioTypeOriginal);
}
exports.isScenarioTypeOriginal = isScenarioTypeOriginal;
exports.Stakeholder = 'Stakeholder';
function isStakeholder(item) {
    return exports.reflection.isInstance(item, exports.Stakeholder);
}
exports.isStakeholder = isStakeholder;
exports.StakeholderSubTypeExtended = 'StakeholderSubTypeExtended';
function isStakeholderSubTypeExtended(item) {
    return exports.reflection.isInstance(item, exports.StakeholderSubTypeExtended);
}
exports.isStakeholderSubTypeExtended = isStakeholderSubTypeExtended;
exports.StakeholderSubTypeExtendedRef = 'StakeholderSubTypeExtendedRef';
function isStakeholderSubTypeExtendedRef(item) {
    return exports.reflection.isInstance(item, exports.StakeholderSubTypeExtendedRef);
}
exports.isStakeholderSubTypeExtendedRef = isStakeholderSubTypeExtendedRef;
exports.StakeholderSubTypeOriginal = 'StakeholderSubTypeOriginal';
function isStakeholderSubTypeOriginal(item) {
    return exports.reflection.isInstance(item, exports.StakeholderSubTypeOriginal);
}
exports.isStakeholderSubTypeOriginal = isStakeholderSubTypeOriginal;
exports.StakeholderTypeExtended = 'StakeholderTypeExtended';
function isStakeholderTypeExtended(item) {
    return exports.reflection.isInstance(item, exports.StakeholderTypeExtended);
}
exports.isStakeholderTypeExtended = isStakeholderTypeExtended;
exports.StakeholderTypeExtendedRef = 'StakeholderTypeExtendedRef';
function isStakeholderTypeExtendedRef(item) {
    return exports.reflection.isInstance(item, exports.StakeholderTypeExtendedRef);
}
exports.isStakeholderTypeExtendedRef = isStakeholderTypeExtendedRef;
exports.StakeholderTypeOriginal = 'StakeholderTypeOriginal';
function isStakeholderTypeOriginal(item) {
    return exports.reflection.isInstance(item, exports.StakeholderTypeOriginal);
}
exports.isStakeholderTypeOriginal = isStakeholderTypeOriginal;
exports.State = 'State';
function isState(item) {
    return exports.reflection.isInstance(item, exports.State);
}
exports.isState = isState;
exports.StateMachine = 'StateMachine';
function isStateMachine(item) {
    return exports.reflection.isInstance(item, exports.StateMachine);
}
exports.isStateMachine = isStateMachine;
exports.StateMachineTest = 'StateMachineTest';
function isStateMachineTest(item) {
    return exports.reflection.isInstance(item, exports.StateMachineTest);
}
exports.isStateMachineTest = isStateMachineTest;
exports.StateMachineTypeExtended = 'StateMachineTypeExtended';
function isStateMachineTypeExtended(item) {
    return exports.reflection.isInstance(item, exports.StateMachineTypeExtended);
}
exports.isStateMachineTypeExtended = isStateMachineTypeExtended;
exports.StateMachineTypeExtendedRef = 'StateMachineTypeExtendedRef';
function isStateMachineTypeExtendedRef(item) {
    return exports.reflection.isInstance(item, exports.StateMachineTypeExtendedRef);
}
exports.isStateMachineTypeExtendedRef = isStateMachineTypeExtendedRef;
exports.StateMachineTypeOriginal = 'StateMachineTypeOriginal';
function isStateMachineTypeOriginal(item) {
    return exports.reflection.isInstance(item, exports.StateMachineTypeOriginal);
}
exports.isStateMachineTypeOriginal = isStateMachineTypeOriginal;
exports.StateSequence = 'StateSequence';
function isStateSequence(item) {
    return exports.reflection.isInstance(item, exports.StateSequence);
}
exports.isStateSequence = isStateSequence;
exports.Step = 'Step';
function isStep(item) {
    return exports.reflection.isInstance(item, exports.Step);
}
exports.isStep = isStep;
exports.StepOperationUCType = 'StepOperationUCType';
function isStepOperationUCType(item) {
    return exports.reflection.isInstance(item, exports.StepOperationUCType);
}
exports.isStepOperationUCType = isStepOperationUCType;
exports.StepSubTypeExtended = 'StepSubTypeExtended';
function isStepSubTypeExtended(item) {
    return exports.reflection.isInstance(item, exports.StepSubTypeExtended);
}
exports.isStepSubTypeExtended = isStepSubTypeExtended;
exports.StepSubTypeExtendedRef = 'StepSubTypeExtendedRef';
function isStepSubTypeExtendedRef(item) {
    return exports.reflection.isInstance(item, exports.StepSubTypeExtendedRef);
}
exports.isStepSubTypeExtendedRef = isStepSubTypeExtendedRef;
exports.StepSubTypeOriginal = 'StepSubTypeOriginal';
function isStepSubTypeOriginal(item) {
    return exports.reflection.isInstance(item, exports.StepSubTypeOriginal);
}
exports.isStepSubTypeOriginal = isStepSubTypeOriginal;
exports.StepTypeExtended = 'StepTypeExtended';
function isStepTypeExtended(item) {
    return exports.reflection.isInstance(item, exports.StepTypeExtended);
}
exports.isStepTypeExtended = isStepTypeExtended;
exports.StepTypeExtendedRef = 'StepTypeExtendedRef';
function isStepTypeExtendedRef(item) {
    return exports.reflection.isInstance(item, exports.StepTypeExtendedRef);
}
exports.isStepTypeExtendedRef = isStepTypeExtendedRef;
exports.StepTypeOriginal = 'StepTypeOriginal';
function isStepTypeOriginal(item) {
    return exports.reflection.isInstance(item, exports.StepTypeOriginal);
}
exports.isStepTypeOriginal = isStepTypeOriginal;
exports.Stereotype = 'Stereotype';
function isStereotype(item) {
    return exports.reflection.isInstance(item, exports.Stereotype);
}
exports.isStereotype = isStereotype;
exports.StereotypeTypeExtended = 'StereotypeTypeExtended';
function isStereotypeTypeExtended(item) {
    return exports.reflection.isInstance(item, exports.StereotypeTypeExtended);
}
exports.isStereotypeTypeExtended = isStereotypeTypeExtended;
exports.StereotypeTypeExtendedRef = 'StereotypeTypeExtendedRef';
function isStereotypeTypeExtendedRef(item) {
    return exports.reflection.isInstance(item, exports.StereotypeTypeExtendedRef);
}
exports.isStereotypeTypeExtendedRef = isStereotypeTypeExtendedRef;
exports.StereotypeTypeOriginal = 'StereotypeTypeOriginal';
function isStereotypeTypeOriginal(item) {
    return exports.reflection.isInstance(item, exports.StereotypeTypeOriginal);
}
exports.isStereotypeTypeOriginal = isStereotypeTypeOriginal;
exports.System = 'System';
function isSystem(item) {
    return exports.reflection.isInstance(item, exports.System);
}
exports.isSystem = isSystem;
exports.SystemsRelation = 'SystemsRelation';
function isSystemsRelation(item) {
    return exports.reflection.isInstance(item, exports.SystemsRelation);
}
exports.isSystemsRelation = isSystemsRelation;
exports.SystemsRelationCategoryExtended = 'SystemsRelationCategoryExtended';
function isSystemsRelationCategoryExtended(item) {
    return exports.reflection.isInstance(item, exports.SystemsRelationCategoryExtended);
}
exports.isSystemsRelationCategoryExtended = isSystemsRelationCategoryExtended;
exports.SystemsRelationCategoryExtendedRef = 'SystemsRelationCategoryExtendedRef';
function isSystemsRelationCategoryExtendedRef(item) {
    return exports.reflection.isInstance(item, exports.SystemsRelationCategoryExtendedRef);
}
exports.isSystemsRelationCategoryExtendedRef = isSystemsRelationCategoryExtendedRef;
exports.SystemsRelationCategoryOriginal = 'SystemsRelationCategoryOriginal';
function isSystemsRelationCategoryOriginal(item) {
    return exports.reflection.isInstance(item, exports.SystemsRelationCategoryOriginal);
}
exports.isSystemsRelationCategoryOriginal = isSystemsRelationCategoryOriginal;
exports.SystemsRelationTypeExtended = 'SystemsRelationTypeExtended';
function isSystemsRelationTypeExtended(item) {
    return exports.reflection.isInstance(item, exports.SystemsRelationTypeExtended);
}
exports.isSystemsRelationTypeExtended = isSystemsRelationTypeExtended;
exports.SystemsRelationTypeExtendedRef = 'SystemsRelationTypeExtendedRef';
function isSystemsRelationTypeExtendedRef(item) {
    return exports.reflection.isInstance(item, exports.SystemsRelationTypeExtendedRef);
}
exports.isSystemsRelationTypeExtendedRef = isSystemsRelationTypeExtendedRef;
exports.SystemsRelationTypeOriginal = 'SystemsRelationTypeOriginal';
function isSystemsRelationTypeOriginal(item) {
    return exports.reflection.isInstance(item, exports.SystemsRelationTypeOriginal);
}
exports.isSystemsRelationTypeOriginal = isSystemsRelationTypeOriginal;
exports.SystemSubTypeExtended = 'SystemSubTypeExtended';
function isSystemSubTypeExtended(item) {
    return exports.reflection.isInstance(item, exports.SystemSubTypeExtended);
}
exports.isSystemSubTypeExtended = isSystemSubTypeExtended;
exports.SystemSubTypeExtendedRef = 'SystemSubTypeExtendedRef';
function isSystemSubTypeExtendedRef(item) {
    return exports.reflection.isInstance(item, exports.SystemSubTypeExtendedRef);
}
exports.isSystemSubTypeExtendedRef = isSystemSubTypeExtendedRef;
exports.SystemSubTypeOriginal = 'SystemSubTypeOriginal';
function isSystemSubTypeOriginal(item) {
    return exports.reflection.isInstance(item, exports.SystemSubTypeOriginal);
}
exports.isSystemSubTypeOriginal = isSystemSubTypeOriginal;
exports.SystemTypeExtended = 'SystemTypeExtended';
function isSystemTypeExtended(item) {
    return exports.reflection.isInstance(item, exports.SystemTypeExtended);
}
exports.isSystemTypeExtended = isSystemTypeExtended;
exports.SystemTypeExtendedRef = 'SystemTypeExtendedRef';
function isSystemTypeExtendedRef(item) {
    return exports.reflection.isInstance(item, exports.SystemTypeExtendedRef);
}
exports.isSystemTypeExtendedRef = isSystemTypeExtendedRef;
exports.SystemTypeOriginal = 'SystemTypeOriginal';
function isSystemTypeOriginal(item) {
    return exports.reflection.isInstance(item, exports.SystemTypeOriginal);
}
exports.isSystemTypeOriginal = isSystemTypeOriginal;
exports.Tag = 'Tag';
function isTag(item) {
    return exports.reflection.isInstance(item, exports.Tag);
}
exports.isTag = isTag;
exports.TermApplicableTo = 'TermApplicableTo';
function isTermApplicableTo(item) {
    return exports.reflection.isInstance(item, exports.TermApplicableTo);
}
exports.isTermApplicableTo = isTermApplicableTo;
exports.TestCase = 'TestCase';
function isTestCase(item) {
    return exports.reflection.isInstance(item, exports.TestCase);
}
exports.isTestCase = isTestCase;
exports.TestDataAttribute = 'TestDataAttribute';
function isTestDataAttribute(item) {
    return exports.reflection.isInstance(item, exports.TestDataAttribute);
}
exports.isTestDataAttribute = isTestDataAttribute;
exports.TestParameter = 'TestParameter';
function isTestParameter(item) {
    return exports.reflection.isInstance(item, exports.TestParameter);
}
exports.isTestParameter = isTestParameter;
exports.TestScenarioTypeExtended = 'TestScenarioTypeExtended';
function isTestScenarioTypeExtended(item) {
    return exports.reflection.isInstance(item, exports.TestScenarioTypeExtended);
}
exports.isTestScenarioTypeExtended = isTestScenarioTypeExtended;
exports.TestScenarioTypeExtendedRef = 'TestScenarioTypeExtendedRef';
function isTestScenarioTypeExtendedRef(item) {
    return exports.reflection.isInstance(item, exports.TestScenarioTypeExtendedRef);
}
exports.isTestScenarioTypeExtendedRef = isTestScenarioTypeExtendedRef;
exports.TestScenarioTypeOriginal = 'TestScenarioTypeOriginal';
function isTestScenarioTypeOriginal(item) {
    return exports.reflection.isInstance(item, exports.TestScenarioTypeOriginal);
}
exports.isTestScenarioTypeOriginal = isTestScenarioTypeOriginal;
exports.TestsRelation = 'TestsRelation';
function isTestsRelation(item) {
    return exports.reflection.isInstance(item, exports.TestsRelation);
}
exports.isTestsRelation = isTestsRelation;
exports.TestsRelationTypeExtended = 'TestsRelationTypeExtended';
function isTestsRelationTypeExtended(item) {
    return exports.reflection.isInstance(item, exports.TestsRelationTypeExtended);
}
exports.isTestsRelationTypeExtended = isTestsRelationTypeExtended;
exports.TestsRelationTypeExtendedRef = 'TestsRelationTypeExtendedRef';
function isTestsRelationTypeExtendedRef(item) {
    return exports.reflection.isInstance(item, exports.TestsRelationTypeExtendedRef);
}
exports.isTestsRelationTypeExtendedRef = isTestsRelationTypeExtendedRef;
exports.TestsRelationTypeOriginal = 'TestsRelationTypeOriginal';
function isTestsRelationTypeOriginal(item) {
    return exports.reflection.isInstance(item, exports.TestsRelationTypeOriginal);
}
exports.isTestsRelationTypeOriginal = isTestsRelationTypeOriginal;
exports.TestStep = 'TestStep';
function isTestStep(item) {
    return exports.reflection.isInstance(item, exports.TestStep);
}
exports.isTestStep = isTestStep;
exports.TestSuite = 'TestSuite';
function isTestSuite(item) {
    return exports.reflection.isInstance(item, exports.TestSuite);
}
exports.isTestSuite = isTestSuite;
exports.TestSuiteSetup = 'TestSuiteSetup';
function isTestSuiteSetup(item) {
    return exports.reflection.isInstance(item, exports.TestSuiteSetup);
}
exports.isTestSuiteSetup = isTestSuiteSetup;
exports.TestSuiteTeardown = 'TestSuiteTeardown';
function isTestSuiteTeardown(item) {
    return exports.reflection.isInstance(item, exports.TestSuiteTeardown);
}
exports.isTestSuiteTeardown = isTestSuiteTeardown;
exports.TestTypeExtended = 'TestTypeExtended';
function isTestTypeExtended(item) {
    return exports.reflection.isInstance(item, exports.TestTypeExtended);
}
exports.isTestTypeExtended = isTestTypeExtended;
exports.TestTypeExtendedRef = 'TestTypeExtendedRef';
function isTestTypeExtendedRef(item) {
    return exports.reflection.isInstance(item, exports.TestTypeExtendedRef);
}
exports.isTestTypeExtendedRef = isTestTypeExtendedRef;
exports.TestTypeOriginal = 'TestTypeOriginal';
function isTestTypeOriginal(item) {
    return exports.reflection.isInstance(item, exports.TestTypeOriginal);
}
exports.isTestTypeOriginal = isTestTypeOriginal;
exports.Theme = 'Theme';
function isTheme(item) {
    return exports.reflection.isInstance(item, exports.Theme);
}
exports.isTheme = isTheme;
exports.ThemeType = 'ThemeType';
function isThemeType(item) {
    return exports.reflection.isInstance(item, exports.ThemeType);
}
exports.isThemeType = isThemeType;
exports.Threat = 'Threat';
function isThreat(item) {
    return exports.reflection.isInstance(item, exports.Threat);
}
exports.isThreat = isThreat;
exports.Time = 'Time';
function isTime(item) {
    return exports.reflection.isInstance(item, exports.Time);
}
exports.isTime = isTime;
exports.Transition = 'Transition';
function isTransition(item) {
    return exports.reflection.isInstance(item, exports.Transition);
}
exports.isTransition = isTransition;
exports.UCActions = 'UCActions';
function isUCActions(item) {
    return exports.reflection.isInstance(item, exports.UCActions);
}
exports.isUCActions = isUCActions;
exports.UCExtends = 'UCExtends';
function isUCExtends(item) {
    return exports.reflection.isInstance(item, exports.UCExtends);
}
exports.isUCExtends = isUCExtends;
exports.UCExtensionPoint = 'UCExtensionPoint';
function isUCExtensionPoint(item) {
    return exports.reflection.isInstance(item, exports.UCExtensionPoint);
}
exports.isUCExtensionPoint = isUCExtensionPoint;
exports.UCExtensionPoints = 'UCExtensionPoints';
function isUCExtensionPoints(item) {
    return exports.reflection.isInstance(item, exports.UCExtensionPoints);
}
exports.isUCExtensionPoints = isUCExtensionPoints;
exports.UCIncludes = 'UCIncludes';
function isUCIncludes(item) {
    return exports.reflection.isInstance(item, exports.UCIncludes);
}
exports.isUCIncludes = isUCIncludes;
exports.UpdateField = 'UpdateField';
function isUpdateField(item) {
    return exports.reflection.isInstance(item, exports.UpdateField);
}
exports.isUpdateField = isUpdateField;
exports.UpdateFields = 'UpdateFields';
function isUpdateFields(item) {
    return exports.reflection.isInstance(item, exports.UpdateFields);
}
exports.isUpdateFields = isUpdateFields;
exports.UseCase = 'UseCase';
function isUseCase(item) {
    return exports.reflection.isInstance(item, exports.UseCase);
}
exports.isUseCase = isUseCase;
exports.UseCaseTest = 'UseCaseTest';
function isUseCaseTest(item) {
    return exports.reflection.isInstance(item, exports.UseCaseTest);
}
exports.isUseCaseTest = isUseCaseTest;
exports.UseCaseTypeExtended = 'UseCaseTypeExtended';
function isUseCaseTypeExtended(item) {
    return exports.reflection.isInstance(item, exports.UseCaseTypeExtended);
}
exports.isUseCaseTypeExtended = isUseCaseTypeExtended;
exports.UseCaseTypeExtendedRef = 'UseCaseTypeExtendedRef';
function isUseCaseTypeExtendedRef(item) {
    return exports.reflection.isInstance(item, exports.UseCaseTypeExtendedRef);
}
exports.isUseCaseTypeExtendedRef = isUseCaseTypeExtendedRef;
exports.UseCaseTypeOriginal = 'UseCaseTypeOriginal';
function isUseCaseTypeOriginal(item) {
    return exports.reflection.isInstance(item, exports.UseCaseTypeOriginal);
}
exports.isUseCaseTypeOriginal = isUseCaseTypeOriginal;
exports.UserStory = 'UserStory';
function isUserStory(item) {
    return exports.reflection.isInstance(item, exports.UserStory);
}
exports.isUserStory = isUserStory;
exports.UserStoryTypeExtended = 'UserStoryTypeExtended';
function isUserStoryTypeExtended(item) {
    return exports.reflection.isInstance(item, exports.UserStoryTypeExtended);
}
exports.isUserStoryTypeExtended = isUserStoryTypeExtended;
exports.UserStoryTypeExtendedRef = 'UserStoryTypeExtendedRef';
function isUserStoryTypeExtendedRef(item) {
    return exports.reflection.isInstance(item, exports.UserStoryTypeExtendedRef);
}
exports.isUserStoryTypeExtendedRef = isUserStoryTypeExtendedRef;
exports.UserStoryTypeOriginal = 'UserStoryTypeOriginal';
function isUserStoryTypeOriginal(item) {
    return exports.reflection.isInstance(item, exports.UserStoryTypeOriginal);
}
exports.isUserStoryTypeOriginal = isUserStoryTypeOriginal;
exports.VariableType = 'VariableType';
function isVariableType(item) {
    return exports.reflection.isInstance(item, exports.VariableType);
}
exports.isVariableType = isVariableType;
exports.VariableTypeExtended = 'VariableTypeExtended';
function isVariableTypeExtended(item) {
    return exports.reflection.isInstance(item, exports.VariableTypeExtended);
}
exports.isVariableTypeExtended = isVariableTypeExtended;
exports.View = 'View';
function isView(item) {
    return exports.reflection.isInstance(item, exports.View);
}
exports.isView = isView;
exports.ViewType = 'ViewType';
function isViewType(item) {
    return exports.reflection.isInstance(item, exports.ViewType);
}
exports.isViewType = isViewType;
exports.Vulnerability = 'Vulnerability';
function isVulnerability(item) {
    return exports.reflection.isInstance(item, exports.Vulnerability);
}
exports.isVulnerability = isVulnerability;
exports.VulnerabilityAttackVectorExtended = 'VulnerabilityAttackVectorExtended';
function isVulnerabilityAttackVectorExtended(item) {
    return exports.reflection.isInstance(item, exports.VulnerabilityAttackVectorExtended);
}
exports.isVulnerabilityAttackVectorExtended = isVulnerabilityAttackVectorExtended;
exports.VulnerabilityAttackVectorExtendedRef = 'VulnerabilityAttackVectorExtendedRef';
function isVulnerabilityAttackVectorExtendedRef(item) {
    return exports.reflection.isInstance(item, exports.VulnerabilityAttackVectorExtendedRef);
}
exports.isVulnerabilityAttackVectorExtendedRef = isVulnerabilityAttackVectorExtendedRef;
exports.VulnerabilityAttackVectorOriginal = 'VulnerabilityAttackVectorOriginal';
function isVulnerabilityAttackVectorOriginal(item) {
    return exports.reflection.isInstance(item, exports.VulnerabilityAttackVectorOriginal);
}
exports.isVulnerabilityAttackVectorOriginal = isVulnerabilityAttackVectorOriginal;
exports.VulnerabilitySubTypeExtended = 'VulnerabilitySubTypeExtended';
function isVulnerabilitySubTypeExtended(item) {
    return exports.reflection.isInstance(item, exports.VulnerabilitySubTypeExtended);
}
exports.isVulnerabilitySubTypeExtended = isVulnerabilitySubTypeExtended;
exports.VulnerabilitySubTypeExtendedRef = 'VulnerabilitySubTypeExtendedRef';
function isVulnerabilitySubTypeExtendedRef(item) {
    return exports.reflection.isInstance(item, exports.VulnerabilitySubTypeExtendedRef);
}
exports.isVulnerabilitySubTypeExtendedRef = isVulnerabilitySubTypeExtendedRef;
exports.VulnerabilitySubTypeOriginal = 'VulnerabilitySubTypeOriginal';
function isVulnerabilitySubTypeOriginal(item) {
    return exports.reflection.isInstance(item, exports.VulnerabilitySubTypeOriginal);
}
exports.isVulnerabilitySubTypeOriginal = isVulnerabilitySubTypeOriginal;
exports.VulnerabilityTypeExtended = 'VulnerabilityTypeExtended';
function isVulnerabilityTypeExtended(item) {
    return exports.reflection.isInstance(item, exports.VulnerabilityTypeExtended);
}
exports.isVulnerabilityTypeExtended = isVulnerabilityTypeExtended;
exports.VulnerabilityTypeExtendedRef = 'VulnerabilityTypeExtendedRef';
function isVulnerabilityTypeExtendedRef(item) {
    return exports.reflection.isInstance(item, exports.VulnerabilityTypeExtendedRef);
}
exports.isVulnerabilityTypeExtendedRef = isVulnerabilityTypeExtendedRef;
exports.VulnerabilityTypeOriginal = 'VulnerabilityTypeOriginal';
function isVulnerabilityTypeOriginal(item) {
    return exports.reflection.isInstance(item, exports.VulnerabilityTypeOriginal);
}
exports.isVulnerabilityTypeOriginal = isVulnerabilityTypeOriginal;
exports.Word = 'Word';
function isWord(item) {
    return exports.reflection.isInstance(item, exports.Word);
}
exports.isWord = isWord;
exports.DataAttributeTypeExtendedRef = 'DataAttributeTypeExtendedRef';
function isDataAttributeTypeExtendedRef(item) {
    return exports.reflection.isInstance(item, exports.DataAttributeTypeExtendedRef);
}
exports.isDataAttributeTypeExtendedRef = isDataAttributeTypeExtendedRef;
exports.DataAttributeTypeOriginal = 'DataAttributeTypeOriginal';
function isDataAttributeTypeOriginal(item) {
    return exports.reflection.isInstance(item, exports.DataAttributeTypeOriginal);
}
exports.isDataAttributeTypeOriginal = isDataAttributeTypeOriginal;
exports.DataEnumerationRef = 'DataEnumerationRef';
function isDataEnumerationRef(item) {
    return exports.reflection.isInstance(item, exports.DataEnumerationRef);
}
exports.isDataEnumerationRef = isDataEnumerationRef;
exports.VariableTypeExtendedRef = 'VariableTypeExtendedRef';
function isVariableTypeExtendedRef(item) {
    return exports.reflection.isInstance(item, exports.VariableTypeExtendedRef);
}
exports.isVariableTypeExtendedRef = isVariableTypeExtendedRef;
exports.VariableTypeOriginal = 'VariableTypeOriginal';
function isVariableTypeOriginal(item) {
    return exports.reflection.isInstance(item, exports.VariableTypeOriginal);
}
exports.isVariableTypeOriginal = isVariableTypeOriginal;
class RslAstReflection extends langium_1.AbstractAstReflection {
    getAllTypes() {
        return ['AcceptanceCriteria', 'AcceptanceCriteriaRule', 'AcceptanceCriteriaScenario', 'AcceptanceCriteriaTest', 'ActionType', 'ActionTypeExtended', 'ActionTypeExtendedRef', 'ActionTypeOriginal', 'ActiveElement', 'ActiveEvent', 'ActiveEventType', 'ActiveEventTypeExtended', 'ActiveEventTypeExtendedRef', 'ActiveEventTypeOriginal', 'ActiveFlow', 'ActiveFlowType', 'ActiveFlowTypeExtended', 'ActiveFlowTypeExtendedRef', 'ActiveFlowTypeOriginal', 'ActiveStructureElement', 'ActiveTask', 'ActiveTaskType', 'ActiveTaskTypeExtended', 'ActiveTaskTypeExtendedRef', 'ActiveTaskTypeOriginal', 'Actor', 'ActorType', 'ActorTypeExtended', 'ActorTypeExtendedRef', 'ActorTypeOriginal', 'AttributeValue', 'BehaviorElement', 'Boolean', 'Check', 'ChildDataEntity', 'Constraint', 'ConstraintSubType', 'ConstraintSubTypeExtended', 'ConstraintSubTypeExtendedRef', 'ConstraintSubTypeOriginal', 'ConstraintType', 'ConstraintTypeExtended', 'ConstraintTypeExtendedRef', 'ConstraintTypeOriginal', 'Data', 'DataAttribute', 'DataAttributeConstraint', 'DataAttributeRefsList', 'DataAttributeType', 'DataAttributeTypeExtended', 'DataAttributeTypeExtendedRef', 'DataAttributeTypeOriginal', 'DataEntity', 'DataEntityCluster', 'DataEntityClusterType', 'DataEntityClusterTypeExtended', 'DataEntityClusterTypeExtendedRef', 'DataEntityClusterTypeOriginal', 'DataEntityConstraint', 'DataEntityGeneric', 'DataEntitySubType', 'DataEntitySubTypeExtended', 'DataEntitySubTypeExtendedRef', 'DataEntitySubTypeOriginal', 'DataEntityTest', 'DataEntityType', 'DataEntityTypeExtended', 'DataEntityTypeExtendedRef', 'DataEntityTypeOriginal', 'DataEnumeration', 'DataEnumerationElement', 'DataEnumerationRef', 'DataTable', 'DataTableHeader', 'DataTableRow', 'DateRule', 'DateTime', 'ElementsRelation', 'ElementsRelationType', 'Expression', 'ExpressionOperator', 'FR', 'FRType', 'FRTypeExtended', 'FRTypeExtendedRef', 'FRTypeOriginal', 'ForeignKey', 'ForeignKeyOnDeleteType', 'ForeignKeyOnDeleteTypeExtended', 'ForeignKeyOnDeleteTypeExtendedRef', 'ForeignKeyOnDeleteTypeOriginal', 'GlossaryTerm', 'GlossaryTermType', 'GlossaryTermTypeExtended', 'GlossaryTermTypeExtendedRef', 'GlossaryTermTypeOriginal', 'Goal', 'GoalSubType', 'GoalSubTypeExtended', 'GoalSubTypeExtendedRef', 'GoalSubTypeOriginal', 'GoalType', 'GoalTypeExtended', 'GoalTypeExtendedRef', 'GoalTypeOriginal', 'ImpactLevel', 'Import', 'IncludeAll', 'IncludeElement', 'IncludeElementGeneric', 'IncludeSystemElementType', 'LinguisticElement', 'LinguisticFragment', 'LinguisticFragmentPart', 'LinguisticFragmentRef', 'LinguisticLanguage', 'LinguisticPattern', 'LinguisticRule', 'LinguisticRuleElement', 'LinguisticRuleElementAndProperty', 'LinguisticRuleType', 'MainScenario', 'ManyToMany', 'MetricType', 'MetricTypeExtended', 'MetricTypeExtendedRef', 'MetricTypeOriginal', 'Model', 'Month', 'Multiplicity', 'OtherElement', 'PackageAbstract', 'PackageSystem', 'PartOfSpeech', 'PassiveStructureElement', 'PriorityType', 'PriorityTypeExtended', 'PriorityTypeExtendedRef', 'PriorityTypeOriginal', 'QR', 'QRSubType', 'QRSubTypeExtended', 'QRSubTypeExtendedRef', 'QRSubTypeOriginal', 'QRType', 'QRTypeExtended', 'QRTypeExtendedRef', 'QRTypeOriginal', 'RefActiveElement', 'RefActor', 'RefDataEntity', 'RefRequirements', 'RefTermApplicableTo', 'RefUC', 'RefUCAction', 'ReferenceElements', 'RelationType', 'RelationTypeExtended', 'RelationTypeExtendedRef', 'RelationTypeOriginal', 'Requirement', 'RequirementsRelation', 'RequirementsRelationType', 'RequirementsRelationTypeExtended', 'RequirementsRelationTypeExtendedRef', 'RequirementsRelationTypeOriginal', 'Risk', 'RiskAssessment', 'RiskGeneric', 'RiskStatus', 'RiskSubType', 'RiskSubTypeExtended', 'RiskSubTypeExtendedRef', 'RiskSubTypeOriginal', 'RiskTreatment', 'RiskTreatmentType', 'RiskTreatmentTypeExtended', 'RiskTreatmentTypeExtendedRef', 'RiskTreatmentTypeOriginal', 'RiskType', 'RiskTypeExtended', 'RiskTypeExtendedRef', 'RiskTypeOriginal', 'Scenario', 'ScenarioType', 'ScenarioTypeExtended', 'ScenarioTypeExtendedRef', 'ScenarioTypeOriginal', 'Stakeholder', 'StakeholderSubType', 'StakeholderSubTypeExtended', 'StakeholderSubTypeExtendedRef', 'StakeholderSubTypeOriginal', 'StakeholderType', 'StakeholderTypeExtended', 'StakeholderTypeExtendedRef', 'StakeholderTypeOriginal', 'State', 'StateMachine', 'StateMachineTest', 'StateMachineType', 'StateMachineTypeExtended', 'StateMachineTypeExtendedRef', 'StateMachineTypeOriginal', 'StateSequence', 'States', 'Step', 'StepOperationUCType', 'StepSubType', 'StepSubTypeExtended', 'StepSubTypeExtendedRef', 'StepSubTypeOriginal', 'StepType', 'StepTypeExtended', 'StepTypeExtendedRef', 'StepTypeOriginal', 'Stereotype', 'StereotypeType', 'StereotypeTypeExtended', 'StereotypeTypeExtendedRef', 'StereotypeTypeOriginal', 'StructureElement', 'System', 'SystemConcept', 'SystemElement', 'SystemRelation', 'SystemSet', 'SystemSubType', 'SystemSubTypeExtended', 'SystemSubTypeExtendedRef', 'SystemSubTypeOriginal', 'SystemType', 'SystemTypeExtended', 'SystemTypeExtendedRef', 'SystemTypeOriginal', 'SystemsRelation', 'SystemsRelationCategory', 'SystemsRelationCategoryExtended', 'SystemsRelationCategoryExtendedRef', 'SystemsRelationCategoryOriginal', 'SystemsRelationType', 'SystemsRelationTypeExtended', 'SystemsRelationTypeExtendedRef', 'SystemsRelationTypeOriginal', 'Tag', 'TermApplicableTo', 'Test', 'TestCase', 'TestData', 'TestDataAttribute', 'TestElement', 'TestParameter', 'TestScenarioType', 'TestScenarioTypeExtended', 'TestScenarioTypeExtendedRef', 'TestScenarioTypeOriginal', 'TestStep', 'TestSuite', 'TestSuiteSetup', 'TestSuiteSetupTeardown', 'TestSuiteTeardown', 'TestType', 'TestTypeExtended', 'TestTypeExtendedRef', 'TestTypeOriginal', 'TestsRelation', 'TestsRelationType', 'TestsRelationTypeExtended', 'TestsRelationTypeExtendedRef', 'TestsRelationTypeOriginal', 'Theme', 'ThemeType', 'Threat', 'Time', 'Transition', 'TypeExtended', 'UCActions', 'UCExtends', 'UCExtensionPoint', 'UCExtensionPoints', 'UCIncludes', 'UpdateField', 'UpdateFields', 'UseCase', 'UseCaseTest', 'UseCaseType', 'UseCaseTypeExtended', 'UseCaseTypeExtendedRef', 'UseCaseTypeOriginal', 'UserStory', 'UserStoryType', 'UserStoryTypeExtended', 'UserStoryTypeExtendedRef', 'UserStoryTypeOriginal', 'VariableType', 'VariableTypeExtended', 'VariableTypeExtendedRef', 'VariableTypeOriginal', 'View', 'ViewType', 'Vulnerability', 'VulnerabilityAttackVector', 'VulnerabilityAttackVectorExtended', 'VulnerabilityAttackVectorExtendedRef', 'VulnerabilityAttackVectorOriginal', 'VulnerabilitySubType', 'VulnerabilitySubTypeExtended', 'VulnerabilitySubTypeExtendedRef', 'VulnerabilitySubTypeOriginal', 'VulnerabilityType', 'VulnerabilityTypeExtended', 'VulnerabilityTypeExtendedRef', 'VulnerabilityTypeOriginal', 'Word'];
    }
    computeIsSubtype(subtype, supertype) {
        switch (subtype) {
            case exports.AcceptanceCriteriaTest:
            case exports.DataEntityTest:
            case exports.StateMachineTest:
            case exports.UseCaseTest: {
                return this.isSubtype(exports.Test, supertype);
            }
            case exports.ActionTypeExtended:
            case exports.ActiveEventTypeExtended:
            case exports.ActiveFlowTypeExtended:
            case exports.ActiveTaskTypeExtended:
            case exports.ActorTypeExtended:
            case exports.ConstraintSubTypeExtended:
            case exports.ConstraintTypeExtended:
            case exports.DataAttributeTypeExtended:
            case exports.DataEntityClusterTypeExtended:
            case exports.DataEntitySubTypeExtended:
            case exports.DataEntityTypeExtended:
            case exports.ForeignKeyOnDeleteTypeExtended:
            case exports.FRTypeExtended:
            case exports.GlossaryTermTypeExtended:
            case exports.GoalSubTypeExtended:
            case exports.GoalTypeExtended:
            case exports.MetricTypeExtended:
            case exports.PriorityTypeExtended:
            case exports.QRSubTypeExtended:
            case exports.QRTypeExtended:
            case exports.RelationTypeExtended:
            case exports.RequirementsRelationTypeExtended:
            case exports.RiskSubTypeExtended:
            case exports.RiskTreatmentTypeExtended:
            case exports.RiskTypeExtended:
            case exports.ScenarioTypeExtended:
            case exports.StakeholderSubTypeExtended:
            case exports.StakeholderTypeExtended:
            case exports.StateMachineTypeExtended:
            case exports.StepSubTypeExtended:
            case exports.StepTypeExtended:
            case exports.StereotypeTypeExtended:
            case exports.SystemsRelationCategoryExtended:
            case exports.SystemsRelationTypeExtended:
            case exports.SystemSubTypeExtended:
            case exports.SystemTypeExtended:
            case exports.TestScenarioTypeExtended:
            case exports.TestsRelationTypeExtended:
            case exports.TestTypeExtended:
            case exports.UseCaseTypeExtended:
            case exports.UserStoryTypeExtended:
            case exports.VariableTypeExtended:
            case exports.VulnerabilityAttackVectorExtended:
            case exports.VulnerabilitySubTypeExtended:
            case exports.VulnerabilityTypeExtended: {
                return this.isSubtype(exports.TypeExtended, supertype);
            }
            case exports.ActionTypeExtendedRef:
            case exports.ActionTypeOriginal: {
                return this.isSubtype(exports.ActionType, supertype);
            }
            case exports.ActiveElement:
            case exports.StateMachine: {
                return this.isSubtype(exports.BehaviorElement, supertype);
            }
            case exports.ActiveEvent:
            case exports.ActiveFlow:
            case exports.ActiveTask: {
                return this.isSubtype(exports.ActiveElement, supertype);
            }
            case exports.ActiveEventTypeExtendedRef:
            case exports.ActiveEventTypeOriginal: {
                return this.isSubtype(exports.ActiveEventType, supertype);
            }
            case exports.ActiveFlowTypeExtendedRef:
            case exports.ActiveFlowTypeOriginal: {
                return this.isSubtype(exports.ActiveFlowType, supertype);
            }
            case exports.ActiveStructureElement:
            case exports.PassiveStructureElement: {
                return this.isSubtype(exports.StructureElement, supertype);
            }
            case exports.ActiveTaskTypeExtendedRef:
            case exports.ActiveTaskTypeOriginal: {
                return this.isSubtype(exports.ActiveTaskType, supertype);
            }
            case exports.Actor:
            case exports.Stakeholder: {
                return this.isSubtype(exports.ActiveStructureElement, supertype);
            }
            case exports.ActorTypeExtendedRef:
            case exports.ActorTypeOriginal: {
                return this.isSubtype(exports.ActorType, supertype);
            }
            case exports.BehaviorElement:
            case exports.IncludeElementGeneric:
            case exports.OtherElement:
            case exports.Requirement:
            case exports.StructureElement: {
                return this.isSubtype(exports.SystemElement, supertype);
            }
            case exports.Constraint:
            case exports.FR:
            case exports.Goal:
            case exports.QR:
            case exports.UseCase:
            case exports.UserStory: {
                return this.isSubtype(exports.Requirement, supertype);
            }
            case exports.ConstraintSubTypeExtendedRef:
            case exports.ConstraintSubTypeOriginal: {
                return this.isSubtype(exports.ConstraintSubType, supertype);
            }
            case exports.ConstraintTypeExtendedRef:
            case exports.ConstraintTypeOriginal: {
                return this.isSubtype(exports.ConstraintType, supertype);
            }
            case exports.Data: {
                return this.isSubtype(exports.PassiveStructureElement, supertype) || this.isSubtype(exports.TestData, supertype);
            }
            case exports.DataAttributeTypeExtendedRef:
            case exports.DataAttributeTypeOriginal: {
                return this.isSubtype(exports.DataAttributeType, supertype);
            }
            case exports.DataEntity:
            case exports.DataEntityCluster: {
                return this.isSubtype(exports.DataEntityGeneric, supertype);
            }
            case exports.DataEntityClusterTypeExtendedRef:
            case exports.DataEntityClusterTypeOriginal: {
                return this.isSubtype(exports.DataEntityClusterType, supertype);
            }
            case exports.DataEntityGeneric:
            case exports.DataEnumeration: {
                return this.isSubtype(exports.PassiveStructureElement, supertype);
            }
            case exports.DataEntitySubTypeExtendedRef:
            case exports.DataEntitySubTypeOriginal: {
                return this.isSubtype(exports.DataEntitySubType, supertype);
            }
            case exports.DataEntityTypeExtendedRef:
            case exports.DataEntityTypeOriginal: {
                return this.isSubtype(exports.DataEntityType, supertype);
            }
            case exports.DataEnumerationRef: {
                return this.isSubtype(exports.DataAttributeType, supertype) || this.isSubtype(exports.VariableType, supertype);
            }
            case exports.ElementsRelation:
            case exports.RequirementsRelation:
            case exports.SystemsRelation:
            case exports.TestsRelation: {
                return this.isSubtype(exports.SystemRelation, supertype);
            }
            case exports.ForeignKeyOnDeleteTypeExtendedRef:
            case exports.ForeignKeyOnDeleteTypeOriginal: {
                return this.isSubtype(exports.ForeignKeyOnDeleteType, supertype);
            }
            case exports.FRTypeExtendedRef:
            case exports.FRTypeOriginal: {
                return this.isSubtype(exports.FRType, supertype);
            }
            case exports.GlossaryTerm:
            case exports.RiskGeneric:
            case exports.Stereotype:
            case exports.TypeExtended: {
                return this.isSubtype(exports.OtherElement, supertype);
            }
            case exports.GlossaryTermTypeExtendedRef:
            case exports.GlossaryTermTypeOriginal: {
                return this.isSubtype(exports.GlossaryTermType, supertype);
            }
            case exports.GoalSubTypeExtendedRef:
            case exports.GoalSubTypeOriginal: {
                return this.isSubtype(exports.GoalSubType, supertype);
            }
            case exports.GoalTypeExtendedRef:
            case exports.GoalTypeOriginal: {
                return this.isSubtype(exports.GoalType, supertype);
            }
            case exports.IncludeAll:
            case exports.IncludeElement: {
                return this.isSubtype(exports.IncludeElementGeneric, supertype);
            }
            case exports.LinguisticElement:
            case exports.SystemElement:
            case exports.SystemRelation:
            case exports.SystemSet: {
                return this.isSubtype(exports.SystemConcept, supertype);
            }
            case exports.LinguisticFragment:
            case exports.LinguisticLanguage:
            case exports.LinguisticRule: {
                return this.isSubtype(exports.LinguisticElement, supertype);
            }
            case exports.LinguisticFragmentRef:
            case exports.LinguisticRuleElementAndProperty:
            case exports.PartOfSpeech:
            case exports.Word: {
                return this.isSubtype(exports.LinguisticFragmentPart, supertype);
            }
            case exports.MetricTypeExtendedRef:
            case exports.MetricTypeOriginal: {
                return this.isSubtype(exports.MetricType, supertype);
            }
            case exports.PackageSystem: {
                return this.isSubtype(exports.PackageAbstract, supertype);
            }
            case exports.PriorityTypeExtendedRef:
            case exports.PriorityTypeOriginal: {
                return this.isSubtype(exports.PriorityType, supertype);
            }
            case exports.QRSubTypeExtendedRef:
            case exports.QRSubTypeOriginal: {
                return this.isSubtype(exports.QRSubType, supertype);
            }
            case exports.QRTypeExtendedRef:
            case exports.QRTypeOriginal: {
                return this.isSubtype(exports.QRType, supertype);
            }
            case exports.RelationTypeExtendedRef:
            case exports.RelationTypeOriginal: {
                return this.isSubtype(exports.RelationType, supertype);
            }
            case exports.RequirementsRelationTypeExtendedRef:
            case exports.RequirementsRelationTypeOriginal: {
                return this.isSubtype(exports.RequirementsRelationType, supertype);
            }
            case exports.Risk:
            case exports.Vulnerability: {
                return this.isSubtype(exports.RiskGeneric, supertype);
            }
            case exports.RiskSubTypeExtendedRef:
            case exports.RiskSubTypeOriginal: {
                return this.isSubtype(exports.RiskSubType, supertype);
            }
            case exports.RiskTreatmentTypeExtendedRef:
            case exports.RiskTreatmentTypeOriginal: {
                return this.isSubtype(exports.RiskTreatmentType, supertype);
            }
            case exports.RiskTypeExtendedRef:
            case exports.RiskTypeOriginal: {
                return this.isSubtype(exports.RiskType, supertype);
            }
            case exports.ScenarioTypeExtendedRef:
            case exports.ScenarioTypeOriginal: {
                return this.isSubtype(exports.ScenarioType, supertype);
            }
            case exports.StakeholderSubTypeExtendedRef:
            case exports.StakeholderSubTypeOriginal: {
                return this.isSubtype(exports.StakeholderSubType, supertype);
            }
            case exports.StakeholderTypeExtendedRef:
            case exports.StakeholderTypeOriginal: {
                return this.isSubtype(exports.StakeholderType, supertype);
            }
            case exports.State: {
                return this.isSubtype(exports.States, supertype);
            }
            case exports.StateMachineTypeExtendedRef:
            case exports.StateMachineTypeOriginal: {
                return this.isSubtype(exports.StateMachineType, supertype);
            }
            case exports.StepSubTypeExtendedRef:
            case exports.StepSubTypeOriginal: {
                return this.isSubtype(exports.StepSubType, supertype);
            }
            case exports.StepTypeExtendedRef:
            case exports.StepTypeOriginal: {
                return this.isSubtype(exports.StepType, supertype);
            }
            case exports.StereotypeTypeExtendedRef:
            case exports.StereotypeTypeOriginal: {
                return this.isSubtype(exports.StereotypeType, supertype);
            }
            case exports.SystemsRelationCategoryExtendedRef:
            case exports.SystemsRelationCategoryOriginal: {
                return this.isSubtype(exports.SystemsRelationCategory, supertype);
            }
            case exports.SystemsRelationTypeExtendedRef:
            case exports.SystemsRelationTypeOriginal: {
                return this.isSubtype(exports.SystemsRelationType, supertype);
            }
            case exports.SystemSubTypeExtendedRef:
            case exports.SystemSubTypeOriginal: {
                return this.isSubtype(exports.SystemSubType, supertype);
            }
            case exports.SystemTypeExtendedRef:
            case exports.SystemTypeOriginal: {
                return this.isSubtype(exports.SystemType, supertype);
            }
            case exports.Test:
            case exports.TestData:
            case exports.TestSuiteSetupTeardown: {
                return this.isSubtype(exports.TestElement, supertype);
            }
            case exports.TestScenarioTypeExtendedRef:
            case exports.TestScenarioTypeOriginal: {
                return this.isSubtype(exports.TestScenarioType, supertype);
            }
            case exports.TestsRelationTypeExtendedRef:
            case exports.TestsRelationTypeOriginal: {
                return this.isSubtype(exports.TestsRelationType, supertype);
            }
            case exports.TestSuiteSetup:
            case exports.TestSuiteTeardown: {
                return this.isSubtype(exports.TestSuiteSetupTeardown, supertype);
            }
            case exports.TestTypeExtendedRef:
            case exports.TestTypeOriginal: {
                return this.isSubtype(exports.TestType, supertype);
            }
            case exports.Theme:
            case exports.View: {
                return this.isSubtype(exports.SystemSet, supertype);
            }
            case exports.UseCaseTypeExtendedRef:
            case exports.UseCaseTypeOriginal: {
                return this.isSubtype(exports.UseCaseType, supertype);
            }
            case exports.UserStoryTypeExtendedRef:
            case exports.UserStoryTypeOriginal: {
                return this.isSubtype(exports.UserStoryType, supertype);
            }
            case exports.VariableTypeExtendedRef:
            case exports.VariableTypeOriginal: {
                return this.isSubtype(exports.VariableType, supertype);
            }
            case exports.VulnerabilityAttackVectorExtendedRef:
            case exports.VulnerabilityAttackVectorOriginal: {
                return this.isSubtype(exports.VulnerabilityAttackVector, supertype);
            }
            case exports.VulnerabilitySubTypeExtendedRef:
            case exports.VulnerabilitySubTypeOriginal: {
                return this.isSubtype(exports.VulnerabilitySubType, supertype);
            }
            case exports.VulnerabilityTypeExtendedRef:
            case exports.VulnerabilityTypeOriginal: {
                return this.isSubtype(exports.VulnerabilityType, supertype);
            }
            default: {
                return false;
            }
        }
    }
    getReferenceType(refInfo) {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            case 'AcceptanceCriteriaTest:requirement':
            case 'RefRequirements:refs':
            case 'RequirementsRelation:source':
            case 'RequirementsRelation:target':
            case 'Risk:negativeRequirement': {
                return exports.Requirement;
            }
            case 'ActionTypeExtendedRef:type': {
                return exports.ActionTypeExtended;
            }
            case 'ActiveEvent:stakeholder':
            case 'ActiveTask:participant':
            case 'ActiveTask:participantTarget':
            case 'Actor:stakeholder':
            case 'Constraint:stakeholder':
            case 'FR:stakeholder':
            case 'Goal:stakeholder':
            case 'QR:stakeholder':
            case 'RiskTreatment:owner':
            case 'Stakeholder:partOf':
            case 'Stakeholder:super':
            case 'UseCase:stakeholder':
            case 'UserStory:stakeholder': {
                return exports.Stakeholder;
            }
            case 'ActiveEventTypeExtendedRef:type': {
                return exports.ActiveEventTypeExtended;
            }
            case 'ActiveFlowTypeExtendedRef:type': {
                return exports.ActiveFlowTypeExtended;
            }
            case 'ActiveTask:partOf': {
                return exports.ActiveTask;
            }
            case 'ActiveTaskTypeExtendedRef:type': {
                return exports.ActiveTaskTypeExtended;
            }
            case 'Actor:super':
            case 'RefActor:refs':
            case 'Step:actor':
            case 'TestStep:actor':
            case 'UseCase:primaryActor':
            case 'UseCaseTest:primaryActor':
            case 'UserStory:actor': {
                return exports.Actor;
            }
            case 'ActorTypeExtendedRef:type': {
                return exports.ActorTypeExtended;
            }
            case 'ChildDataEntity:child':
            case 'Data:type':
            case 'DataEntity:super':
            case 'DataEntityCluster:main':
            case 'DataEntityTest:entity':
            case 'DataEnumerationRef:dataEntity':
            case 'ForeignKey:targetEntity':
            case 'ManyToMany:targetEntity':
            case 'ManyToMany:throughEntity':
            case 'RefDataEntity:refDataEntity':
            case 'TestCase:entity':
            case 'VariableType:dataEntity':
            case 'VariableTypeExtendedRef:dataEntity':
            case 'VariableTypeOriginal:dataEntity': {
                return exports.DataEntity;
            }
            case 'Constraint:partOf': {
                return exports.Constraint;
            }
            case 'ConstraintSubTypeExtendedRef:type': {
                return exports.ConstraintSubTypeExtended;
            }
            case 'ConstraintTypeExtendedRef:type': {
                return exports.ConstraintTypeExtended;
            }
            case 'DataAttributeRefsList:attributeRef':
            case 'DataEntityConstraint:showAsAttribute':
            case 'DataTableHeader:attributeRefs':
            case 'ForeignKey:showAsField':
            case 'ForeignKey:toField':
            case 'ManyToMany:throughSourceField':
            case 'ManyToMany:throughTargetField':
            case 'TestDataAttribute:attribute': {
                return exports.DataAttribute;
            }
            case 'DataAttributeTypeExtendedRef:type': {
                return exports.DataAttributeTypeExtended;
            }
            case 'DataEntityClusterTypeExtendedRef:type': {
                return exports.DataEntityClusterTypeExtended;
            }
            case 'DataEntitySubTypeExtendedRef:type': {
                return exports.DataEntitySubTypeExtended;
            }
            case 'DataEntityTypeExtendedRef:type': {
                return exports.DataEntityTypeExtended;
            }
            case 'DataEnumerationRef:type': {
                return exports.DataEnumeration;
            }
            case 'ElementsRelation:source':
            case 'ElementsRelation:target':
            case 'ReferenceElements:references': {
                return exports.SystemElement;
            }
            case 'ForeignKeyOnDeleteTypeExtendedRef:type': {
                return exports.ForeignKeyOnDeleteTypeExtended;
            }
            case 'FR:partOf': {
                return exports.FR;
            }
            case 'FRTypeExtendedRef:type': {
                return exports.FRTypeExtended;
            }
            case 'GlossaryTerm:partOf':
            case 'GlossaryTerm:super': {
                return exports.GlossaryTerm;
            }
            case 'GlossaryTermTypeExtendedRef:type': {
                return exports.GlossaryTermTypeExtended;
            }
            case 'Goal:partOf': {
                return exports.Goal;
            }
            case 'GoalSubTypeExtendedRef:type': {
                return exports.GoalSubTypeExtended;
            }
            case 'GoalTypeExtendedRef:type': {
                return exports.GoalTypeExtended;
            }
            case 'IncludeAll:system':
            case 'IncludeElement:system':
            case 'System:partOf':
            case 'SystemsRelation:source':
            case 'SystemsRelation:target':
            case 'TestSuite:sut': {
                return exports.System;
            }
            case 'IncludeElement:element': {
                return exports.SystemConcept;
            }
            case 'LinguisticFragmentRef:option': {
                return exports.LinguisticFragment;
            }
            case 'MetricTypeExtendedRef:type': {
                return exports.MetricTypeExtended;
            }
            case 'PriorityTypeExtendedRef:type': {
                return exports.PriorityTypeExtended;
            }
            case 'QR:partOf': {
                return exports.QR;
            }
            case 'QRSubTypeExtendedRef:type': {
                return exports.QRSubTypeExtended;
            }
            case 'QRTypeExtendedRef:type': {
                return exports.QRTypeExtended;
            }
            case 'RefActiveElement:refActiveElement': {
                return exports.ActiveElement;
            }
            case 'RefUC:refs':
            case 'RefUCAction:useCase':
            case 'Step:usecase':
            case 'UCExtends:usecase':
            case 'UseCaseTest:useCase': {
                return exports.UseCase;
            }
            case 'RelationTypeExtendedRef:type': {
                return exports.RelationTypeExtended;
            }
            case 'RequirementsRelationTypeExtendedRef:type': {
                return exports.RequirementsRelationTypeExtended;
            }
            case 'Risk:partOf': {
                return exports.Risk;
            }
            case 'Risk:refVulnerabilities':
            case 'Vulnerability:partOf':
            case 'Vulnerability:super': {
                return exports.Vulnerability;
            }
            case 'RiskSubTypeExtendedRef:type': {
                return exports.RiskSubTypeExtended;
            }
            case 'RiskTreatmentTypeExtendedRef:type': {
                return exports.RiskTreatmentTypeExtended;
            }
            case 'RiskTypeExtendedRef:type': {
                return exports.RiskTypeExtended;
            }
            case 'ScenarioTypeExtendedRef:type': {
                return exports.ScenarioTypeExtended;
            }
            case 'StakeholderSubTypeExtendedRef:type': {
                return exports.StakeholderSubTypeExtended;
            }
            case 'StakeholderTypeExtendedRef:type': {
                return exports.StakeholderTypeExtended;
            }
            case 'StateMachine:entity':
            case 'UseCase:dataEntity': {
                return exports.DataEntityGeneric;
            }
            case 'StateMachineTest:stateMachine': {
                return exports.StateMachine;
            }
            case 'StateMachineTypeExtendedRef:type': {
                return exports.StateMachineTypeExtended;
            }
            case 'StateSequence:refState':
            case 'Transition:nextstate': {
                return exports.State;
            }
            case 'Step:event':
            case 'TestStep:event':
            case 'UseCase:triggeredBy': {
                return exports.ActiveEvent;
            }
            case 'Step:next': {
                return exports.Step;
            }
            case 'StepSubTypeExtendedRef:type': {
                return exports.StepSubTypeExtended;
            }
            case 'StepTypeExtendedRef:type': {
                return exports.StepTypeExtended;
            }
            case 'StereotypeTypeExtendedRef:type': {
                return exports.StereotypeTypeExtended;
            }
            case 'SystemsRelationCategoryExtendedRef:type': {
                return exports.SystemsRelationCategoryExtended;
            }
            case 'SystemsRelationTypeExtendedRef:type': {
                return exports.SystemsRelationTypeExtended;
            }
            case 'SystemSubTypeExtendedRef:type': {
                return exports.SystemSubTypeExtended;
            }
            case 'SystemTypeExtendedRef:type': {
                return exports.SystemTypeExtended;
            }
            case 'TestScenarioTypeExtendedRef:type': {
                return exports.TestScenarioTypeExtended;
            }
            case 'TestsRelation:source':
            case 'TestsRelation:target': {
                return exports.Test;
            }
            case 'TestsRelationTypeExtendedRef:type': {
                return exports.TestsRelationTypeExtended;
            }
            case 'TestStep:testCase': {
                return exports.TestCase;
            }
            case 'TestTypeExtendedRef:type': {
                return exports.TestTypeExtended;
            }
            case 'UCExtends:extensionPoint': {
                return exports.UCExtensionPoint;
            }
            case 'UseCaseTypeExtendedRef:type': {
                return exports.UseCaseTypeExtended;
            }
            case 'UserStory:partOf': {
                return exports.UserStory;
            }
            case 'UserStoryTypeExtendedRef:type': {
                return exports.UserStoryTypeExtended;
            }
            case 'VariableTypeExtendedRef:type': {
                return exports.VariableTypeExtended;
            }
            case 'VulnerabilityAttackVectorExtendedRef:type': {
                return exports.VulnerabilityAttackVectorExtended;
            }
            case 'VulnerabilitySubTypeExtendedRef:type': {
                return exports.VulnerabilitySubTypeExtended;
            }
            case 'VulnerabilityTypeExtendedRef:type': {
                return exports.VulnerabilityTypeExtended;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }
    getTypeMetaData(type) {
        switch (type) {
            case 'AcceptanceCriteria': {
                return {
                    name: 'AcceptanceCriteria',
                    mandatory: [
                        { name: 'isAbstract', type: 'boolean' },
                        { name: 'isConcrete', type: 'boolean' },
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'AcceptanceCriteriaScenario': {
                return {
                    name: 'AcceptanceCriteriaScenario',
                    mandatory: [
                        { name: 'given', type: 'array' },
                        { name: 'then', type: 'array' },
                        { name: 'when', type: 'array' }
                    ]
                };
            }
            case 'AcceptanceCriteriaTest': {
                return {
                    name: 'AcceptanceCriteriaTest',
                    mandatory: [
                        { name: 'criteriaR', type: 'array' },
                        { name: 'criteriaS', type: 'array' },
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'ActiveEvent': {
                return {
                    name: 'ActiveEvent',
                    mandatory: [
                        { name: 'isCatch', type: 'boolean' },
                        { name: 'isFinal', type: 'boolean' },
                        { name: 'isInitial', type: 'boolean' },
                        { name: 'isThrow', type: 'boolean' },
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'ActiveFlow': {
                return {
                    name: 'ActiveFlow',
                    mandatory: [
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'ActiveTask': {
                return {
                    name: 'ActiveTask',
                    mandatory: [
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'Actor': {
                return {
                    name: 'Actor',
                    mandatory: [
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'Constraint': {
                return {
                    name: 'Constraint',
                    mandatory: [
                        { name: 'acceptanceCriteria', type: 'array' },
                        { name: 'isAbstract', type: 'boolean' },
                        { name: 'isConcrete', type: 'boolean' },
                        { name: 'isNegative', type: 'boolean' },
                        { name: 'isPositive', type: 'boolean' },
                        { name: 'isProblem', type: 'boolean' },
                        { name: 'isSolution', type: 'boolean' },
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'Data': {
                return {
                    name: 'Data',
                    mandatory: [
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'DataAttribute': {
                return {
                    name: 'DataAttribute',
                    mandatory: [
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'DataAttributeConstraint': {
                return {
                    name: 'DataAttributeConstraint',
                    mandatory: [
                        { name: 'checks', type: 'array' }
                    ]
                };
            }
            case 'DataAttributeRefsList': {
                return {
                    name: 'DataAttributeRefsList',
                    mandatory: [
                        { name: 'attributeRef', type: 'array' }
                    ]
                };
            }
            case 'DataEntity': {
                return {
                    name: 'DataEntity',
                    mandatory: [
                        { name: 'attributes', type: 'array' },
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'DataEntityCluster': {
                return {
                    name: 'DataEntityCluster',
                    mandatory: [
                        { name: 'children', type: 'array' },
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'DataEntityConstraint': {
                return {
                    name: 'DataEntityConstraint',
                    mandatory: [
                        { name: 'checks', type: 'array' }
                    ]
                };
            }
            case 'DataEntityTest': {
                return {
                    name: 'DataEntityTest',
                    mandatory: [
                        { name: 'tags', type: 'array' },
                        { name: 'testDataAttributes', type: 'array' }
                    ]
                };
            }
            case 'DataEnumeration': {
                return {
                    name: 'DataEnumeration',
                    mandatory: [
                        { name: 'tags', type: 'array' },
                        { name: 'values', type: 'array' }
                    ]
                };
            }
            case 'DataTable': {
                return {
                    name: 'DataTable',
                    mandatory: [
                        { name: 'tableRows', type: 'array' }
                    ]
                };
            }
            case 'DataTableHeader': {
                return {
                    name: 'DataTableHeader',
                    mandatory: [
                        { name: 'attributeRefs', type: 'array' }
                    ]
                };
            }
            case 'DataTableRow': {
                return {
                    name: 'DataTableRow',
                    mandatory: [
                        { name: 'attributeValues', type: 'array' }
                    ]
                };
            }
            case 'ElementsRelation': {
                return {
                    name: 'ElementsRelation',
                    mandatory: [
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'FR': {
                return {
                    name: 'FR',
                    mandatory: [
                        { name: 'acceptanceCriteria', type: 'array' },
                        { name: 'isAbstract', type: 'boolean' },
                        { name: 'isConcrete', type: 'boolean' },
                        { name: 'isNegative', type: 'boolean' },
                        { name: 'isPositive', type: 'boolean' },
                        { name: 'isProblem', type: 'boolean' },
                        { name: 'isSolution', type: 'boolean' },
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'GlossaryTerm': {
                return {
                    name: 'GlossaryTerm',
                    mandatory: [
                        { name: 'synonyms', type: 'array' },
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'Goal': {
                return {
                    name: 'Goal',
                    mandatory: [
                        { name: 'acceptanceCriteria', type: 'array' },
                        { name: 'isAbstract', type: 'boolean' },
                        { name: 'isConcrete', type: 'boolean' },
                        { name: 'isNegative', type: 'boolean' },
                        { name: 'isPositive', type: 'boolean' },
                        { name: 'isProblem', type: 'boolean' },
                        { name: 'isSolution', type: 'boolean' },
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'IncludeAll': {
                return {
                    name: 'IncludeAll',
                    mandatory: [
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'IncludeElement': {
                return {
                    name: 'IncludeElement',
                    mandatory: [
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'LinguisticFragment': {
                return {
                    name: 'LinguisticFragment',
                    mandatory: [
                        { name: 'options', type: 'array' }
                    ]
                };
            }
            case 'LinguisticPattern': {
                return {
                    name: 'LinguisticPattern',
                    mandatory: [
                        { name: 'parts', type: 'array' }
                    ]
                };
            }
            case 'LinguisticRule': {
                return {
                    name: 'LinguisticRule',
                    mandatory: [
                        { name: 'pattern', type: 'array' }
                    ]
                };
            }
            case 'MainScenario': {
                return {
                    name: 'MainScenario',
                    mandatory: [
                        { name: 'steps', type: 'array' }
                    ]
                };
            }
            case 'Model': {
                return {
                    name: 'Model',
                    mandatory: [
                        { name: 'packages', type: 'array' }
                    ]
                };
            }
            case 'PackageSystem': {
                return {
                    name: 'PackageSystem',
                    mandatory: [
                        { name: 'imports', type: 'array' }
                    ]
                };
            }
            case 'QR': {
                return {
                    name: 'QR',
                    mandatory: [
                        { name: 'acceptanceCriteria', type: 'array' },
                        { name: 'isAbstract', type: 'boolean' },
                        { name: 'isConcrete', type: 'boolean' },
                        { name: 'isNegative', type: 'boolean' },
                        { name: 'isPositive', type: 'boolean' },
                        { name: 'isProblem', type: 'boolean' },
                        { name: 'isSolution', type: 'boolean' },
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'RefActiveElement': {
                return {
                    name: 'RefActiveElement',
                    mandatory: [
                        { name: 'refActiveElement', type: 'array' }
                    ]
                };
            }
            case 'RefActor': {
                return {
                    name: 'RefActor',
                    mandatory: [
                        { name: 'refs', type: 'array' }
                    ]
                };
            }
            case 'RefDataEntity': {
                return {
                    name: 'RefDataEntity',
                    mandatory: [
                        { name: 'refDataEntity', type: 'array' }
                    ]
                };
            }
            case 'ReferenceElements': {
                return {
                    name: 'ReferenceElements',
                    mandatory: [
                        { name: 'references', type: 'array' }
                    ]
                };
            }
            case 'RefRequirements': {
                return {
                    name: 'RefRequirements',
                    mandatory: [
                        { name: 'refs', type: 'array' }
                    ]
                };
            }
            case 'RefTermApplicableTo': {
                return {
                    name: 'RefTermApplicableTo',
                    mandatory: [
                        { name: 'refs', type: 'array' }
                    ]
                };
            }
            case 'RefUC': {
                return {
                    name: 'RefUC',
                    mandatory: [
                        { name: 'refs', type: 'array' }
                    ]
                };
            }
            case 'RequirementsRelation': {
                return {
                    name: 'RequirementsRelation',
                    mandatory: [
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'Risk': {
                return {
                    name: 'Risk',
                    mandatory: [
                        { name: 'acceptanceCriteria', type: 'array' },
                        { name: 'refVulnerabilities', type: 'array' },
                        { name: 'tags', type: 'array' },
                        { name: 'treatments', type: 'array' }
                    ]
                };
            }
            case 'Scenario': {
                return {
                    name: 'Scenario',
                    mandatory: [
                        { name: 'steps', type: 'array' }
                    ]
                };
            }
            case 'Stakeholder': {
                return {
                    name: 'Stakeholder',
                    mandatory: [
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'State': {
                return {
                    name: 'State',
                    mandatory: [
                        { name: 'isFinal', type: 'boolean' },
                        { name: 'isInitial', type: 'boolean' },
                        { name: 'states', type: 'array' },
                        { name: 'transitions', type: 'array' }
                    ]
                };
            }
            case 'StateMachine': {
                return {
                    name: 'StateMachine',
                    mandatory: [
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'StateMachineTest': {
                return {
                    name: 'StateMachineTest',
                    mandatory: [
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'StateSequence': {
                return {
                    name: 'StateSequence',
                    mandatory: [
                        { name: 'refState', type: 'array' }
                    ]
                };
            }
            case 'Step': {
                return {
                    name: 'Step',
                    mandatory: [
                        { name: 'scenarios', type: 'array' }
                    ]
                };
            }
            case 'Stereotype': {
                return {
                    name: 'Stereotype',
                    mandatory: [
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'System': {
                return {
                    name: 'System',
                    mandatory: [
                        { name: 'isFinal', type: 'boolean' },
                        { name: 'isReusable', type: 'boolean' },
                        { name: 'systemConcepts', type: 'array' },
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'SystemsRelation': {
                return {
                    name: 'SystemsRelation',
                    mandatory: [
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'TestCase': {
                return {
                    name: 'TestCase',
                    mandatory: [
                        { name: 'testParameters', type: 'array' },
                        { name: 'testSteps', type: 'array' }
                    ]
                };
            }
            case 'TestsRelation': {
                return {
                    name: 'TestsRelation',
                    mandatory: [
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'TestSuite': {
                return {
                    name: 'TestSuite',
                    mandatory: [
                        { name: 'elements', type: 'array' },
                        { name: 'isFinal', type: 'boolean' },
                        { name: 'isReusable', type: 'boolean' },
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'TestSuiteSetup': {
                return {
                    name: 'TestSuiteSetup',
                    mandatory: [
                        { name: 'testSteps', type: 'array' }
                    ]
                };
            }
            case 'TestSuiteTeardown': {
                return {
                    name: 'TestSuiteTeardown',
                    mandatory: [
                        { name: 'testSteps', type: 'array' }
                    ]
                };
            }
            case 'Theme': {
                return {
                    name: 'Theme',
                    mandatory: [
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'UCActions': {
                return {
                    name: 'UCActions',
                    mandatory: [
                        { name: 'actions', type: 'array' }
                    ]
                };
            }
            case 'UCExtensionPoints': {
                return {
                    name: 'UCExtensionPoints',
                    mandatory: [
                        { name: 'extensionPoints', type: 'array' }
                    ]
                };
            }
            case 'UCIncludes': {
                return {
                    name: 'UCIncludes',
                    mandatory: [
                        { name: 'includes', type: 'array' }
                    ]
                };
            }
            case 'UpdateFields': {
                return {
                    name: 'UpdateFields',
                    mandatory: [
                        { name: 'updateFields', type: 'array' }
                    ]
                };
            }
            case 'UseCase': {
                return {
                    name: 'UseCase',
                    mandatory: [
                        { name: 'acceptanceCriteria', type: 'array' },
                        { name: 'extends', type: 'array' },
                        { name: 'isAbstract', type: 'boolean' },
                        { name: 'isConcrete', type: 'boolean' },
                        { name: 'isNegative', type: 'boolean' },
                        { name: 'isPositive', type: 'boolean' },
                        { name: 'isProblem', type: 'boolean' },
                        { name: 'isSolution', type: 'boolean' },
                        { name: 'mainScenarios', type: 'array' },
                        { name: 'supportingActors', type: 'array' },
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'UseCaseTest': {
                return {
                    name: 'UseCaseTest',
                    mandatory: [
                        { name: 'oneTimeSetupSteps', type: 'array' },
                        { name: 'oneTimeTeardownSteps', type: 'array' },
                        { name: 'supportingActors', type: 'array' },
                        { name: 'tags', type: 'array' },
                        { name: 'testCases', type: 'array' }
                    ]
                };
            }
            case 'UserStory': {
                return {
                    name: 'UserStory',
                    mandatory: [
                        { name: 'acceptanceCriteria', type: 'array' },
                        { name: 'isAbstract', type: 'boolean' },
                        { name: 'isConcrete', type: 'boolean' },
                        { name: 'isNegative', type: 'boolean' },
                        { name: 'isPositive', type: 'boolean' },
                        { name: 'isProblem', type: 'boolean' },
                        { name: 'isSolution', type: 'boolean' },
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'View': {
                return {
                    name: 'View',
                    mandatory: [
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'Vulnerability': {
                return {
                    name: 'Vulnerability',
                    mandatory: [
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}
exports.RslAstReflection = RslAstReflection;
exports.reflection = new RslAstReflection();
//# sourceMappingURL=ast.js.map